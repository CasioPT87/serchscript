
"<h1>Nerd terminology</h1>       \n        <h3>holistic</h3>\n        <div>Approach to IT management that is concerned with viewing and treating a complex computer system as a single entity</div>\n             \n        <h3>List of stuff to research</h3>\n        <ul><li>Solid principle</li><li>Single responsabillity</li></ul>\n             \n        <h3>Get a good description of ports</h3>\n        \n             \n        <h3>IPv4 and IPv6</h3>\n        \n             \n        <h3>namespaces</h3>\n        \n             \n        <h3>VPN</h3>\n        \n             \n        <h3>ssh</h3>\n        \n      ,<h1>Programming Terminology</h1>       \n        <h3>Approaches to programming</h3>\n        <ul><li><a href=\"https://en.wikipedia.org/wiki/Imperative_programming\">Imperative programming</a> – focuses on how to execute, defines <a href=\"https://en.wikipedia.org/wiki/Control_flow\">control flow</a> as <a href=\"https://en.wikipedia.org/wiki/Statement_(programming)\">statements</a> that change a program <a href=\"https://en.wikipedia.org/wiki/State_(computer_science)\">state</a>.</li><li><a href=\"https://en.wikipedia.org/wiki/Declarative_programming\">Declarative programming</a> – focuses on what to execute, defines program logic, but not detailed <a href=\"https://en.wikipedia.org/wiki/Control_flow\">control flow</a>.</li></ul>\n             \n        <h3>Programming paradigms</h3>\n        <ul><li><a href=\"https://en.wikipedia.org/wiki/Procedural_programming\">Procedural programming</a>, <a href=\"https://en.wikipedia.org/wiki/Structured_programming\">structured programming</a> – specifies the steps a program must take to reach a desired state.</li><li><a href=\"https://en.wikipedia.org/wiki/Functional_programming\">Functional programming</a> – treats programs as evaluating <a href=\"https://en.wikipedia.org/wiki/Function_(mathematics)\">mathematical functions</a> and avoids <a href=\"https://en.wikipedia.org/wiki/Program_state\">state</a> and <a href=\"https://en.wikipedia.org/wiki/Immutable_object\">mutable</a> data</li><li><a href=\"https://en.wikipedia.org/wiki/Object-oriented_programming\">Object-oriented programming</a> (OOP) – organizes programs as <a href=\"https://en.wikipedia.org/wiki/Object_(computer_science)\"><em>objects</em></a>: <a href=\"https://en.wikipedia.org/wiki/Data_structure\">data structures</a> consisting of <a href=\"https://en.wikipedia.org/wiki/Field_(computer_science)\">datafields</a> and <a href=\"https://en.wikipedia.org/wiki/Method_(computer_science)\">methods</a> together with their interactions.</li></ul><div><br></div>\n             \n        <h3>Types of programming -can be implemented using different paradigms-</h3>\n        <ul><li><a href=\"https://en.wikipedia.org/wiki/Event-driven_programming\">Event-driven programming</a> – program <a href=\"https://en.wikipedia.org/wiki/Control_flow\">control flow</a> is determined by <a href=\"https://en.wikipedia.org/wiki/Event_(computing)\">events</a>, such as <a href=\"https://en.wikipedia.org/wiki/Sensor\">sensor</a> inputs or user actions (<a href=\"https://en.wikipedia.org/wiki/Computer_mouse\">mouse</a> clicks, key presses) or <a href=\"https://en.wikipedia.org/wiki/Message_passing\">messages</a> from other programs or <a href=\"https://en.wikipedia.org/wiki/Thread_(computer_science)\">threads</a>.</li><li><a href=\"https://en.wikipedia.org/wiki/Automata-based_programming\">Automata-based programming</a> – a program, or part, is treated as a model of a finite state machine or any other formal automaton.</li><li><a href=\"https://en.wikipedia.org/wiki/Reactive_programming\">Reactive programming</a> is a declarative <a href=\"https://en.wikipedia.org/wiki/Programming_paradigm\">programming paradigm</a> concerned with <a href=\"https://en.wikipedia.org/wiki/Dataflow_programming\">data streams</a> and the propagation of change.</li></ul><div><br></div>\n      ,<h1>BEM basics</h1>       \n        <h3>Block, Element, Modifier</h3>\n        <div>This division goes WITHIN the Object, Component, Utility one and basically adds specificity to those.<br><br></div><h1><strong>Block:</strong></h1><div><br>Encapsulates a standalone entity. This entity is meaningful on its own<br><br></div><pre>.container .wrapper .block ... </pre><div><br></div><h1><strong>Element:</strong></h1><div><br>Parts of a block. Have NO standalone meaning. Any element is semantically tied to its block.<br>Block name plus two underscores plus element name.</div><div><br></div><pre>.block__elem </pre><div><br></div><div><br></div><h1><strong>Modifier:</strong></h1><div><br>Flags on blocks or elements. Use them to change appearance, behavior or state.<br>Block’s or element’s name plus two dashes.</div><div><br></div><pre>.block--mod or .block__elem--mod</pre><div><br></div>\n             \n        <h3>Objects, Components, Utilities: Main division for BEM</h3>\n        <div>La principal division es entre <strong>objectos</strong>, <strong>componentes</strong> y <strong>utilidades</strong>. No deben tener contenido semantico (deben tener nombres como \"container, grid, fields, item...\").<strong> Tienen que ser reusables!!<br>La conya es que los objetos no tienen que englobar a los componentes y estos a las utilidades. Todos pueden estar juntos en un mismo elemento. Se trata mas de que los objetos dan estilos generales y son extremadamente reusables, los componentes dan estilos mas concretos y solo son reusables para ese tipo se elemento y las utilidades hacen ajustes generales.</strong><br><br>Dentro de esta division ya tenemos la otra entre <strong>bloques</strong>, <strong>elementos</strong> y <strong>modificadores</strong>.<br><br></div><h1><strong>Objectos:</strong></h1><div><br></div><div>Se pueden utilizar en un monton de sitios porque tienen nombres como \"o-container\" o \"o-grid\" o \"o-container--narrow\".<br><br></div><h1><strong>Componentes:</strong></h1><div><br>Solo se pueden reutilizar en elementos muy similares y tienen nombre como \"c-fileds\" o \"c-fields__item\" o \"c-fields--tight\".<br><br></div><h1><strong>Utilidades:</strong></h1><div><br>Sirven para hacer modificaciones a cualquier elemento. Tienen nombre como \"u-half\"</div><div><br><br></div>\n             \n        <h3>Ejemplo</h3>\n        <h1>CSS:</h1><div><br></div><pre>.o-container {  width: 100%;  max-width: 1000px;  margin: 0 auto;}\r\n.o-container--narrow {  max-width: 600px;}\r\n.o-grid {  display: flex;  flex-wrap: wrap;}\r\n.o-grid__item {  width: 100%;  display: flex;  flex-direction: column;}\r\n.c-fields__item {  margin-bottom: 20px;}\r\n.c-fields--tight {  .c-fields__item {    margin-bottom: 10px;  }}\r\n.u-half {  width: 50%;}</pre><h1><strong><br>VIEW:</strong></h1><div><br></div><pre>&lt;%= form_tag '/login', class: 'e-form ' do %&gt; \r\n  &lt;ol class=\"o-grid c-fields c-fields--tight\"&gt;\r\n    &lt;li class=\"o-grid__item c-fields__item u-half\"&gt;\r\n      &lt;%= text_field_tag :name, nil, placeholder: \"Name\", class: 'e-input' %&gt;      \r\n    &lt;/li&gt;     \r\n    &lt;li class=\"o-grid__item c-fields__item u-half\"&gt;\r\n      &lt;%= password_field_tag :password, nil, placeholder: \"Password\", class: 'e-input' %&gt;\r\n    &lt;/li&gt;\r\n    &lt;li class=\"o-grid__item c-fields__item\"&gt; \r\n      &lt;%= submit_tag \"Log in\", class: 'e-button e-button-submit' %&gt;\r\n    &lt;/li&gt;\r\n  &lt;/ol&gt;\r\n&lt;%end%&gt;</pre>\n             \n        <h3>Some tricks</h3>\n        <ul><li>Delete all the magic sprocket links from application.scss -actually delete everything in that file-, and import the files one by one with sass. This way you have total control about the order it's imported.</li></ul><div><br></div><pre>//  generic\r\n@import 'generic/reset';\r\n\r\n//  elements -general stuff, general font, color, etc...\r\n@import 'elements/page';\r\n\r\n//  objects -containers and wrappers-\r\n@import 'objects/container';\r\n\r\n//  components -like forms, inputs and all that-\r\n@import 'components/form';\r\n@import 'components/input';\r\n@import 'components/button';</pre><div><br></div><ul><li>Create a <em>generic/reset.rb</em> file with a reset.</li><li>Create an <em>elements/page.rb</em> file with the broad general styles -font-size, body and all that-</li><li>You can do this in the main container -in the main layout- to apply different classes to it:</li></ul><div><br></div><pre>&lt;div class=\"&lt;%= ['o-container', *yield(:container_classes)].join(' ') %&gt;\"&gt; </pre><div><br>And then, in the different views:<br><br></div><pre>&lt;% content_for :container_classes, 'o-container--narrow' %&gt;</pre><div><br>cool, eh??</div>\n      ,<h1>SASS basics</h1>       \n        <h3>Nesting</h3>\n        <div>It's better to explain it with an example:<br><br></div><pre>nav {\r\n  ul {\r\n    margin: 0;\r\n    padding: 0;\r\n    list-style: none;\r\n  }\r\n  li {\r\n    display: inline-block;\r\n  }\r\n}</pre><div><br>is the same as:<br><br></div><pre>nav ul {\r\n  margin: 0;\r\n  padding: 0;\r\n  list-style: none;\r\n}\r\nnav li {\r\n  display: inline-block;\r\n}</pre>\n             \n        <h3>@import</h3>\n        <pre>@import \"other_file_path\"</pre><div>Allows you to include the content of one file in another. You don't need to add the extension, just the name of the file.<br>Any variables or mixins declared in the imported file can be used now in your file<br>question: what about functions???<br><br></div>\n             \n        <h3>Partials</h3>\n        <div>If you prefix the name of a file with an underscore:</div><pre>_my_file.scss</pre><div><br>the file won't be transpiled until we do:</div><pre>@import \"my_file\"</pre><div><br>*Note we don't include the prefix underscore when importing</div>\n             \n        <h3>@mixin and @include</h3>\n        <div>The @mixin directive lets you create CSS code that is to be reused throughout the website.</div><div>The @include directive is created to let you use (include) the mixin.<br><br><strong>How to use</strong><br><br>So we create a mixin:<br><br></div><pre>@mixin my-mixin {\r\n  color: red;\r\n  someproperty: somevalue;\r\n}</pre><div><br>and we include it somewhere:<br><br></div><pre><em>selector </em>{<br>  @include my-<em>mixin</em>;<em><br></em>}</pre><div><br><strong>A mixing can include other mixins</strong><br><br></div><pre>@mixin my-mixin {\r\n  someproperty: value;\r\n  @include othermixin;\r\n}</pre><div><br><strong>Can use variables</strong><br><br>create (check how the second parameter uses a default value):<br><br></div><pre>@mixin bordered($color, $width: 200px) {\r\n  border: $width solid $color;\r\n}</pre><div><br>use:<br><br></div><pre>.myArticle {\r\n  @include bordered(blue, 1px);  // Call mixin with two values\r\n}</pre><div><br></div>\n             \n        <h3>@extend</h3>\n        <div>Is useful if you have almost identically styled elements that only differ in some small details.<br>Pretty intuitive, kind of what you'd expect:<br><br></div><pre>.button-basic  {\r\n  border: none;\r\n  padding: 15px 30px;\r\n  text-align: center;\r\n  font-size: 16px;\r\n  cursor: pointer;\r\n}\r\n\r\n.button-report  {\r\n  @extend .button-basic;\r\n  background-color: red;\r\n}\r\n\r\n.button-submit  {\r\n  @extend .button-basic;\r\n  background-color: green;\r\n  color: white;\r\n}</pre><div><br></div>\n             \n        <h3>@function</h3>\n        <div>Just as you would imagine. Very useful to create a <em>rythm</em>.<br><br></div><pre><strong>@function</strong> <strong>pow</strong>($base<strong>,</strong> $exponent) {\r\n  $result: 1;\r\n  <strong>@for</strong> $_ <strong>from</strong> 1 <strong>through</strong> $exponent {\r\n    $result: $result <strong>*</strong> $base;\r\n  }\r\n  <strong>@return</strong> $result;\r\n}\r\n\r\n<strong>.sidebar</strong> {\r\n  <strong>float</strong>: left;\r\n  <strong>margin-left</strong>: <strong>pow</strong>(4<strong>,</strong> 3) <strong>*</strong> 1px;\r\n}</pre><div><br></div>\n      ,<h1>UML Sequence Diagrams</h1>       \n        <h3>Used for: Represent relationship between several entities in time</h3>\n        <div><a href=\"https://plantuml.com/sequence-diagram\">Docs</a></div>\n             \n        <h3>basics: </h3>\n        <div>In here we create three entities, with the two basics kind of arrows. <br><br></div><pre>@startuml\r\nAlice -&gt; \"Bob()\" : Hello\r\n\"Bob()\" -&gt; \"This is very\\nlong\" as Long\r\n' You can also declare:\r\n' \"Bob()\" -&gt; Long as \"This is very\\nlong\"\r\nLong --&gt; \"Bob()\" : ok\r\n@enduml</pre><div><br><br></div>\n             \n        <h3>Message to self</h3>\n        <div>Easy peasy, just the same name as emitter and receptor:<br><br></div><pre>@startuml\r\nAlice-&gt;Alice: This is a signal to self.\\nIt also demonstrates\\nmultiline \\ntext\r\n@enduml</pre><div><br><action-text-attachment content-type=\"image\" url=\"https://www.planttext.com/api/plantuml/img/7Smn2e0m34RXtLFa0de01wcZksENe543QGhc5po-HNZmRIy5-CPJh9jDD-cddv7MIuDQJA6din4gXTWnP5z0R55fbr8zS3CaifV7eAOkb1toealYU_j-\" width=\"190\" height=\"190\"></action-text-attachment></div>\n             \n        <h3>Failed arrow</h3>\n        <pre>@startuml\r\nBob -&gt;x Alice\r\n@enduml</pre><div><br><action-text-attachment content-type=\"image\" url=\"https://www.planttext.com/api/plantuml/img/SoWkIImgAStDuNBAJrBGjQjGSCp9J4xbSaZDIm6A0W00\" width=\"129\" height=\"116\"></action-text-attachment><br><br></div>\n             \n        <h3>Arrow color</h3>\n        <pre>@startuml\r\nBob -[#red]&gt; Alice : hello\r\nAlice -[#0000FF]-&gt;Bob : ok\r\n@enduml</pre><div><br><action-text-attachment content-type=\"image\" url=\"https://www.planttext.com/api/plantuml/img/SoWkIImgAStDuNBAJrBGZLOkIas9jLDmpCbCJbMmKiX8pSd9vuBmW986GE3c5gjh1r9ifP2VpUMGcfS2r0q0\" width=\"129\" height=\"160\"></action-text-attachment></div>\n             \n        <h3>Header and title</h3>\n        <pre>@startuml\r\n\r\nheader Page Header\r\n\r\ntitle Example Title\r\n\r\nAlice -&gt; Bob : message 1\r\nAlice -&gt; Bob : message 2\r\n\r\n@enduml</pre><div><br><action-text-attachment content-type=\"image\" url=\"https://www.planttext.com/api/plantuml/img/SoWkIImgAStDuUBAI4rCIIrI24XCJrNm0BEvk4eoIt9I5Lmh4dCBW7G8YCV5vPYJcPoge6kdu9IVf62ba9jQN0pIOuXBmeYBoo4rBmLe2G00\" width=\"166\" height=\"210\"></action-text-attachment></div>\n             \n        <h3>Notes</h3>\n        <ul><li>Notes at the left or right of the messages</li></ul><div><br></div><pre>@startuml\r\nAlice-&gt;Bob : hello\r\nnote left: this is a first note\r\n\r\nBob-&gt;Alice : ok\r\nnote right: this is another note\r\n\r\nBob-&gt;Bob : I am thinking\r\nnote left\r\na note\r\ncan also be defined\r\non several lines\r\nend note\r\n@endum</pre><div><br></div><div><action-text-attachment content-type=\"image\" url=\"https://www.planttext.com/api/plantuml/img/JOz13eCm30JlViL-W0zmGBItFiCGGoAC8oLftr_J78haWxMUqSfpRLpQ-rHwQ5fbc9vvmOWegfaiDu7AraQqc2fy65igjU4w4JayJ3_HdNnqeQGztWqFevIxqJjUuFEYx4Ys_xk8ExgoWRLcB88WMp89b0rLFb9OeHvK4WkTddtpBxu0\" width=\"366\" height=\"250\"></action-text-attachment></div><ul><li>You can put notes over the lines of one entity -or both- as well (and with different colors)</li></ul><div><br></div><pre>@startuml\r\nparticipant Alice\r\nparticipant Bob\r\nnote left of Alice #aqua\r\nThis is displayed\r\nleft of Alice.\r\nend note\r\n\r\nnote right of Alice: This is displayed right of Alice.\r\n\r\nnote over Alice: This is displayed over Alice.\r\n\r\nnote over Alice, Bob #FFAAAA: This is displayed\\n over Bob and Alice.\r\n\r\nnote over Bob, Alice\r\nThis is yet another\r\nexample of\r\na long note.\r\nend note\r\n@enduml</pre><div><br><action-text-attachment content-type=\"image\" url=\"https://www.planttext.com/api/plantuml/img/TP313e8m38RlVOecNWaFu0ayy0GUlLGei6HiSnGZRsyH32AwBDcoVb-plral56NeB0GzJMa2ES7Scf8tBoT_1UU5qN8jwEiPmGFT1e9pQthKNPa-M1gvWWsL0hiA9nlc7j4qxLe-uix_8jB5ytUE_vsrkkUJAG0UYYBNzKE-k1cUADBFxjje9LdcyhP75eMzj1o17zG5gsmDXDQxvfNt8tccDntp4m00\" width=\"369\" height=\"358\"></action-text-attachment></div><ul><li>And put them at the same level with \"<strong>/\"</strong></li></ul><div><br></div><pre>@startuml\r\nnote over Alice : initial state of Alice\r\n/ note over Bob : initial state of Bob\r\nBob -&gt; Alice : hello\r\n@enduml</pre><div><br><action-text-attachment content-type=\"image\" url=\"https://www.planttext.com/api/plantuml/img/SoWkIImgAStDuShBBqbLo2zBBL9mpCbCJbMmKiZCoop9JCnH02e1IQL19BZq5H1AdVAJi2a42dE1f7Jju8PbfERav7CvfEQb02q30000\" width=\"308\" height=\"170\"></action-text-attachment></div>\n             \n        <h3>Space, use \"|||\"</h3>\n        <div>You can specify the number of pixels as well:<br><br></div><pre>@startuml\r\n\r\nAlice -&gt; Bob: message 1\r\nBob --&gt; Alice: ok\r\n|||\r\nAlice -&gt; Bob: message 2\r\nBob --&gt; Alice: ok\r\n||45||\r\nAlice -&gt; Bob: message 3\r\nBob --&gt; Alice: ok\r\n\r\n@enduml</pre><div><br><action-text-attachment content-type=\"image\" url=\"https://www.planttext.com/api/plantuml/img/SoWkIImgAStDuU9opCbCJbNGjLDmoa-oKiXDBIvEJ4zLCEG2SXLqWS9WUIk5_6okcfeQ7AgDiAesCSMfmHYB1Yw7rBmKe9C0\" width=\"164\" height=\"347\"></action-text-attachment></div>\n             \n        <h3>Create a new entity</h3>\n        <div>You can use the keywork <strong><em>create </em></strong>to emphasize that a message creates a new object<br><br></div><pre>@startuml\r\nBob -&gt; Alice : hello\r\n\r\ncreate Other\r\nAlice -&gt; Other : new\r\n\r\ncreate control String\r\nAlice -&gt; String\r\nnote right : You can also put notes!\r\n\r\nAlice --&gt; Bob : ok\r\n\r\n@enduml</pre><div><br><action-text-attachment content-type=\"image\" url=\"https://www.planttext.com/api/plantuml/img/HOux3i9030Lxdy8SW0kaG24NeA2YN1OhkyBOoEiLru_39vHFCoEziNaoxm-6IQ-uF-2HQoOSi12p0cIZv8GdBsJmOI6zPqX2hqt9AcxAU7QhCl_TxnODn-fSFBgBTin9C75JV7R7bROT_Ah8rZi3wXrW9Bd5mGK0\" width=\"447\" height=\"291\"></action-text-attachment></div>\n             \n        <h3>Vertical arrows between messages {start} <-> {end}</h3>\n        <pre>@startuml\r\n!pragma teoz true\r\n\r\n{start} Alice -&gt; Bob : start doing things during duration\r\nBob -&gt; Max : something\r\nMax -&gt; Bob : something else\r\n{end} Bob -&gt; Alice : finish\r\n\r\n{start} &lt;-&gt; {end} : some time\r\n\r\n@enduml</pre><div><br><action-text-attachment content-type=\"image\" url=\"https://www.planttext.com/api/plantuml/img/HOzB3i8m34JtESLm02vG8LJOSuX0JMif7vGu4gBgtN4IK3UsF7wsnsCMcwHuPmwlP6Tl8HG_a5J8cBKrDrmSFmZ7CwxnZW5DnHGvp915OyPKKgqqMU4OJ0MLlzbtvQEdnfbQxsl-CiXbCYk5QSDli5ySyEJ0UTcTdBJNmJuFOQz6HvNqXoy0\" width=\"422\" height=\"218\"></action-text-attachment></div>\n             \n        <h3>Box for participants</h3>\n        <pre>@startuml\r\n\r\nbox \"Internal Service\" #LightBlue\r\nparticipant Bob\r\nparticipant Alice\r\nend box\r\nparticipant Other\r\n\r\nBob -&gt; Alice : hello\r\nAlice -&gt; Other : hello\r\n\r\n@enduml</pre><div><br><action-text-attachment content-type=\"image\" url=\"https://www.planttext.com/api/plantuml/img/LOx12e0m34Fl_OgYPt_0WwWtGV3W5snQtA1kCglu-HO5mMEIbv1w5vFaM1d0nWkpBWYbO1X7IgUVACEyzukJbW-2JL4_-Sq4mJRQdsvOQQ0me-xyaa4S9G0jO56z79ReY3d2gzH-eC-6MeVqr0q0\" width=\"206\" height=\"181\"></action-text-attachment></div>\n             \n        <h3>passport for express.js</h3>\n        <div>@startuml<br><br>participant User as \"User Browser\"<br>participant Server<br>participant Session as \"express-session middw\"<br>participant passauth as \"passport.authenticate() middw\"<br>participant passini as \"passport.initialize() middw\"<br>participant passsess as \"passport.session() middw\"<br>participant db<br>note over User #FFAAAA<br>user connects for the<br>first time to this domain<br>end note<br><br>/ note over passini, passsess #silver<br>both will look in every request for<br>req.session.passort, if it doesn't exists<br>it is ignored in the diagram<br>end note<br><br>User -&gt; Server: GET request to /login<br><br>Server -&gt; Session : ey, there is a connection to the server<br>note over Session<br>checks Cookie HTTP header<br>on the req obj, as it is the<br>first time, there is none<br>end note<br><br>Session -&gt; db : create session record on db<br>Session -&gt; Session : creates req.session,\\ncreates the cookie for the session\\nand puts it in req.session<br><br><br>Session -&gt; Server : here is the Cookie with the session but no user Id <br><br><br>Server -&gt; User : html for the login form\\nwith the Cookie in the header<br><br>note over User #FFAAAA<br>the user gets bored<br>and closes the laptop<br>end note<br><br>note over User #aqua<br>the user comes back<br>and connects to login<br>end note<br><br>User -&gt; Server : GET request to /login<br>Server -&gt; Session : hey! there is another connection to server<br><br>note over Session<br>checks Cookie HTTP header<br>on the req obj, and this time<br>it finds one -the one created<br>before-<br>end note<br><br>note over Session<br>checkd the connect.sid value from the cookie<br>end note<br><br>Session -&gt; db : does this session exists\\nin the db?<br>db -&gt; Session : yes<br>Session -&gt; Server : everything cool,\\nnothing to change here<br>Server -&gt; User : here is the form again\\nand the same cookie in\\n the header as before<br><br>User -&gt; Server : here is my username and password (POST to /login)<br><br>Server -&gt; passauth : this route uses the\\npassport.authenticate() middleware<br>passauth -&gt; db : are this username and password in the db? (we assume they are)<br>db -&gt; passauth : yes<br><br>note over passauth : cb returns user<br>note over passauth : it creates passport property in req.session<br>note over passauth : serializes the user via passport.serializeUser()<br>note over passauth : attach serialized user (for example the user id) to req.session.passport.user<br>note over passauth : attach the whole user to req.user<br><br>passauth -&gt; Server : we are all set<br>Server -&gt; User : HTML with message \"welcome back!\"<br><br>User -&gt; Server : GET to authenticate route<br><br>Server -&gt; Session : hey! another connection to server!<br>note over Session: check Cookie from req obj (connect.sid)<br>Session -&gt; db : does this session exists?<br>db -&gt; Session : yes<br>note over Session: cool, we don't change Cookie then<br><br>Session -&gt; passini : next (all request go through this two middlewares\\nbut don't do shit because there is\\nnot req.session.passport property\\n, but this time is different)<br><br>note over passini<br>checks req.session.password.user and see that there<br>is a serialized user there -probably user id-<br>end note<br><br>passini -&gt; passsess: next -and pass the serialized user-<br>passsess -&gt; db: give me the user for this userid<br>db -&gt; passsess: there it is<br>note over passsess: set the user to req.user again<br><br>passsess -&gt; Server: we are all set<br>Server -&gt; Server: the protected route checks that req.session.passport.user\\nexists -it does, as we just set it-\\nand works fine<br><br>Server -&gt; User: here is your HTML and we are cool<br><br><br>@enduml</div>\n      ,<h1>UML Object Diagram</h1>       \n        <h3>Used to represent relations between objects</h3>\n        <div><a href=\"https://plantuml.com/object-diagram\">Docs</a> que paisha</div>\n             \n        <h3>Create Objects (and give an alias)</h3>\n        <pre>@startuml\r\nobject firstObject\r\nobject \"My Second Object\" as o2\r\n@enduml</pre><div><br><action-text-attachment content-type=\"image\" url=\"https://www.planttext.com/api/plantuml/img/SoWkIImgAStDuSfFoafDBb58oomgBl47is52IhwL2i6foVbvAGeG2IM5n6A5V2CkXzIy5A1M0000\" width=\"257\" height=\"53\"></action-text-attachment></div>\n             \n        <h3>Adding fields</h3>\n        <pre>@startuml\r\n\r\nobject user\r\n\r\nuser : name = \"Dummy\"\r\nuser : id = 123\r\n\r\n@enduml</pre><div><br>or another -and easier- way of doing it:<br><br></div><pre>@startuml\r\n\r\nobject user {\r\n  name = \"Dummy\"\r\n  id = 123\r\n}\r\n\r\n@enduml</pre><div><br><action-text-attachment content-type=\"image\" url=\"https://www.planttext.com/api/plantuml/img/SoWkIImgAStDuUBAJyfAJIvHA2rEBUBY0f4ALWfvYRcf2hOAIYwbkRcLIZ3Hp1IWcA6HCHUNGsfU2b0p0000\" width=\"131\" height=\"69\"></action-text-attachment></div>\n             \n        <h3>Maps </h3>\n        <pre>@startuml\r\nmap CapitalCity {\r\n UK =&gt; London\r\n USA =&gt; Washington\r\n Germany =&gt; Berlin\r\n}\r\n@enduml</pre><div><br><action-text-attachment content-type=\"image\" url=\"https://www.planttext.com/api/plantuml/img/SoWkIImgAStDuSfDB51mJYp8B4dCSSuigLIevb88zLQmjLFmoSzBoSy3ye8TGTpmnEACpBpq4f2GUsfHRc9U9KZOARKe9pEFgvRB8JKl1MWU0000\" width=\"154\" height=\"84\"></action-text-attachment></div>\n             \n        <h3>Relationships between maps</h3>\n        <ul><li>Link a fields to another object -check out the length of the arrows-</li></ul><div><br></div><pre>@startuml\r\nobject London\r\nobject Washington\r\nobject Berlin\r\nobject NewYork\r\n\r\nmap CapitalCity {\r\n UK *-&gt; London\r\n USA *--&gt; Washington\r\n Germany *---&gt; Berlin\r\n}\r\n\r\nNewYork --&gt; CapitalCity::USA\r\n@enduml</pre><div><br><action-text-attachment content-type=\"image\" url=\"https://www.planttext.com/api/plantuml/img/SoWkIImgAStDuSfFoafDBb7moSzBoS-3yS8JYpCoyz9B429EgKKvcN2UNsfvP7vHDXTNRcA1WdDYGMP9OevpPacbGZMNGgYtWfQk7Sn0XT1WHo0VA81afe9xQb5kObubI08e0pMxbeiBQgu2I1J9M2ihe2bS3gbvAK0N0m00\" width=\"248\" height=\"371\"></action-text-attachment></div>\n             \n        <h3>Relations between objects -check the length of the arrows-</h3>\n        <pre>@startuml\r\nobject London {\r\n    country: uk,\r\n    population: 8M\r\n}\r\n\r\nobject Seville {\r\n    country: spain,\r\n    population: 1M\r\n}\r\n\r\nobject Petersfield {\r\n    country: uk,\r\n    population: 0.05M\r\n}\r\n\r\nLondon --&gt; Seville\r\nLondon ----&gt; Petersfield\r\n@enduml</pre><div><br><action-text-attachment content-type=\"image\" url=\"https://www.planttext.com/api/plantuml/img/SoWkIImgAStDuSfFoafDBb7moSzBoSzJgEPI08Ba_DAyag9AAuNIR1smG45-GMbEOabcVfwLWeKlLoqNJ5jmQbbcJaugkhxYWiJCF4ojXiXQ0r9BKekAqp9JSrA8iTP0py0Kh1tgKbrTEvZj226G89AvN0wfUIb0Jm80\" width=\"221\" height=\"348\"></action-text-attachment></div>\n             \n        <h3>Test</h3>\n        \n      ,<h1>Babel main packages</h1>       \n        <h3>Basic packages to use with Babel:</h3>\n        <div>@babel/core: I has the main functionality.<br>@babel/cli: Babel built-in CLI which can be used to compile files from the command line.<br>@babel/preset-env: Default setting for Babel</div>\n             \n        <h3>To use with React.js</h3>\n        <div><strong>@babel/preset-react</strong></div><div><br>This preset always includes the following plugins, so it works with .jsx files:<br><br></div><ul><li>@babel/plugin-syntax-jsx</li><li>@babel/plugin-transform-react-jsx</li><li>@babel/plugin-transform-react-display-name</li></ul>\n             \n        <h3>To use with Typescript:</h3>\n        <div>@babel/preset-typescript</div>\n             \n        <h3>Others</h3>\n        <div>@babel/runtime: So Babel can re-use output of a polyfill when applying other polyfill. It's a matter of efficiency. Doesn't impact the way you write the code.</div>\n      ,<h1>Babel configuration</h1>       \n        <h3>There is two files that you can use for config, depending what is your use case:</h3>\n        <ul><li><strong>babel.config.json</strong>: In case that you want to apply Babel to the whole project and compile node_modules</li><li>babelrc.json: If you only want to apply Babel to a single part of your project -which is unprobable-</li></ul><div><br>**They must be in the root of the project -where the package.json is- otherwise you have to do more configuration</div>\n             \n        <h3>Structure of a babel.config.js -example-</h3>\n        <div>module.exports = function(api) {</div><div>  var validEnv = ['development', 'test', 'production']</div><div>  var currentEnv = api.env()</div><div>  var isDevelopmentEnv = api.env('development')</div><div>  var isProductionEnv = api.env('production')</div><div>  var isTestEnv = api.env('test')</div><div><br></div><div>  if (!validEnv.includes(currentEnv)) {</div><div>    throw new Error(</div><div>      'Please specify a valid `NODE_ENV` or ' +</div><div>        '`BABEL_ENV` environment variables. Valid values are \"development\", ' +</div><div>        '\"test\", and \"production\". Instead, received: ' +</div><div>        JSON.stringify(currentEnv) +</div><div>        '.'</div><div>    )</div><div>  }</div><div><br></div><div>  return {</div><div>    presets: [</div><div>      isTestEnv &amp;&amp; [</div><div>        '@babel/preset-env',</div><div>        {</div><div>          targets: {</div><div>            node: 'current'</div><div>          },</div><div>          modules: 'commonjs'</div><div>        },</div><div>        '@babel/preset-react'</div><div>      ],</div><div>      (isProductionEnv || isDevelopmentEnv) &amp;&amp; [</div><div>        '@babel/preset-env',</div><div>        {</div><div>          forceAllTransforms: true,</div><div>          useBuiltIns: 'entry',</div><div>          corejs: 3,</div><div>          modules: false,</div><div>          exclude: ['transform-typeof-symbol']</div><div>        }</div><div>      ],</div><div>      [</div><div>        '@babel/preset-react',</div><div>        {</div><div>          development: isDevelopmentEnv || isTestEnv,</div><div>          useBuiltIns: true</div><div>        }</div><div>      ]</div><div>      ,</div><div>      [</div><div>        '@babel/preset-typescript',</div><div>        {</div><div>          development: isDevelopmentEnv || isTestEnv,</div><div>          useBuiltIns: true</div><div>        }</div><div>      ]</div><div>    ].filter(Boolean),</div><div>    plugins: [</div><div>      'babel-plugin-macros',</div><div>      '@babel/plugin-syntax-dynamic-import',</div><div>      isTestEnv &amp;&amp; 'babel-plugin-dynamic-import-node',</div><div>      '@babel/plugin-transform-destructuring',</div><div>      [</div><div>        '@babel/plugin-proposal-class-properties',</div><div>        {</div><div>          loose: true</div><div>        }</div><div>      ],</div><div>      [</div><div>        '@babel/plugin-proposal-object-rest-spread',</div><div>        {</div><div>          useBuiltIns: true</div><div>        }</div><div>      ],</div><div>      [</div><div>        '@babel/plugin-transform-runtime',</div><div>        {</div><div>          helpers: false,</div><div>          regenerator: true,</div><div>          corejs: false</div><div>        }</div><div>      ],</div><div>      [</div><div>        '@babel/plugin-transform-regenerator',</div><div>        {</div><div>          async: false</div><div>        }</div><div>      ],</div><div>      isProductionEnv &amp;&amp; [</div><div>        'babel-plugin-transform-react-remove-prop-types',</div><div>        {</div><div>          removeImport: true</div><div>        }</div><div>      ]</div><div>    ].filter(Boolean)</div><div>  }</div><div>}</div>\n             \n        <h3>Plugins and Presets</h3>\n        <div>Plugins is what actually makes Babel work. Without plugins it basically does nothing.<br>Presets are collections of plugins with a related purpose. Presets have some extra configuration that you can set.</div>\n      ,<h1>npm semantic versioning symbols</h1>       \n        <h3>symbols</h3>\n        <ul><li>version Must match version exactly</li><li>&gt;version Must be greater than version</li><li>&gt;=version etc</li><li>&lt;version</li><li>&lt;=version</li><li>~version \"Approximately equivalent to version\" See <a href=\"https://github.com/npm/node-semver#versions\">semver</a>. This one is complicated. Explained:</li></ul><div><em>Allows patch-level changes if a minor version is specified on the comparator. Allows minor-level changes if not.</em><br><br></div><ul><li>^version \"Compatible with version\" See <a href=\"https://github.com/npm/node-semver#versions\">semver</a>. Explained:</li></ul><div><em>Allows changes that do not modify the left-most non-zero element in the [major, minor, patch] tuple. In other words, this allows patch and minor updates for versions 1.0.0 and above, patch updates for versions 0.X &gt;=0.1.0, and no updates for versions 0.0.X. </em><br><br></div><ul><li>1.2.x 1.2.0, 1.2.1, etc., but not 1.3.0</li><li>http://... See 'URLs as Dependencies' below</li><li>* Matches any version</li><li>\"\" (just an empty string) Same as *</li><li>version1 - version2 Same as &gt;=version1 &lt;=version2.</li><li>range1 || range2 Passes if either range1 or range2 are satisfied.</li><li>git... See 'Git URLs as Dependencies' below</li><li>You can also use the user/repo.</li><li>tag A specific version tagged and published as tag See <a href=\"https://docs.npmjs.com/cli/v7/commands/npm-dist-tag\">npm dist-tag</a></li><li>path/path/path. See <a href=\"https://docs.npmjs.com/cli/v7/configuring-npm/package-json#local-paths\">Local Paths</a></li></ul><div><br></div>\n      ,<h1>Rails general notes</h1>       \n        <h3>content_for and provide</h3>\n        <div>Both associate a value to a symbol<br>   &lt;% provide(:title, \"About\") %&gt; or &lt;% content_for(:title, \"About\") %&gt;<br>   &lt;%= yield(:title) %&gt; &lt;---- retrieves the value of a symbol<br><br>**The difference is that \"content_for\" can be used several times in a template whereas \"provide\" can only be used once and will stop working for other \"provides\"</div>\n             \n        <h3><whateverobject>.inspect</h3>\n        <div>returns a string of the object</div>\n             \n        <h3>_url vs _path</h3>\n        <div>_url will give you the whole url whereas _path will give you only the path. Example:<br><br>static_pages_help_url: localhost:3000/static_pages/help<br>\t\t \tstatic_pages_help_path: /static_pages/help</div>\n             \n        <h3>small things:</h3>\n        <ul><li>fixtures do not run though validations.</li></ul>\n             \n        <h3>has_secure_password</h3>\n        <div>Adding a secure password<br> -- \"has_secure_password\" to a user model adds: <br> - The ability to save a securely hashed password_digest attribute to the database<br> - Add the virtual attributes (exist on the model but not on the db) \"password\" and \"password_validation\" that checks that they mathch when creating the instance of the model<br> - An \"authenticate\" method that returns the user when the password is correct (false otherwise)<br><br> ** the only requirement is that the model (I think that I mean the table in the db) have an attribute called \"password_digest\" (which means password hashed)</div>\n             \n        <h3>console environment</h3>\n        <ul><li>console environments: the default env for the console is development.</li><li> You can check the current env with: Rails.env.test? (example)</li><li> You can open the console with a different env this way: rails console --environment test</li><li> You can run the server like this as well: rails --envireonment production</li></ul>\n             \n        <h3>Flash vs Flash.now</h3>\n        <ul><li>Flash[:notice]’s message will persist to the next action and should be used when redirecting to another action via the ‘redirect_to’ method.</li></ul><div><br></div><ul><li>Flash.now[:notice]’s message will be displayed in the view your are rendering via the ‘render’ method.</li></ul>\n      ,<h1>Ruby general notes</h1>       \n        <h3>Hashes syntax</h3>\n        <div><br></div><ul><li>There is two syntaxes to write hashes with symbols: </li></ul><div>   test = { :name =&gt; \"sergio\" } is the same than<br>   test = { name: \"sergio\" }<br><br></div><ul><li>When a hash is the last argument in a method or function call, the curly braces are optional, so this two are equivalent:</li></ul><div> stylesheet_link_tag 'application', { media: 'all', 'data-turbolinks-track': 'reload' }<br> # is the same as this:<br> stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track': 'reload'<br><br></div><ul><li>When a hash is created passing an argument:</li></ul><div> h = Hash.new('whatever') that will be the default value for non existing keys<br> h[:foo] # will return \"whatever\"<br><br><br></div>\n             \n        <h3>begin end rescue ensure</h3>\n        <div>Begin end creates a scope. Whatever code we put inside will be ran. Interesting fact: Methods in Ruby are no more that begin end blocks.<br><br>To run a begin end block ONLY if the instance variable doesn't exist:<br><br></div><pre>def my_method\r\n  @whatever ||= begin\r\n    #your code here\r\n  end\r\nend</pre><div><br>To explain \"rescue\" and \"ensure\" we are going to use an example:<br><br></div><pre>def <strong>create_or_update_batch</strong>\r\n  @batch <strong>||=</strong> begin\r\n    BookBatch<strong>.</strong>create(book_batch<strong>.</strong>batch_attrs)\r\n  end\r\n\r\n  @batch<strong>.</strong>update\r\nrescue\r\n  raise_book_batch_error\r\n\r\nensure\r\n  clean_up_orphaned_book_batches\r\nend</pre><div><br>\"rescue\" will only run if an exception is thrown (like \"catch\" in javascript)<br>\"ensure\" will always run, whether there is an exception or not. (like \"always\" in javascript)<br><br><br>If we don't provide the type of error to \"rescue\", it will use \"StandardError\"<br><br></div><pre>rescue ActiveRecord<strong>::</strong>AttributeAssignmentError</pre>\n      ,<h1>Ruby metaprogramming I</h1>       \n        <h3>caveats</h3>\n        <ul><li>If we create two classes with the same name, we end up with one class with all the methods.</li></ul><div><br></div><ul><li>Classes are open classes, what means that we can always add -or rewrite- methods</li></ul>\n             \n        <h3>instance variables vs class variables</h3>\n        <ul><li>Instance variables do not exist until they are assigned. @v1 won't exists until the method is called. That's why several instances of the same class can have different instance variables and with different values. Can only be used in instance methods.</li></ul><div><br></div><pre>class MyClass\r\n  def my_method\r\n    @v = 1\r\n  end\r\nend</pre><div><br><br></div><ul><li>Class variables must be initialized before they are used. Then they can be modified in the methods if we want to. Can be used in class_methods and instance methods:</li></ul><div><br><br></div><pre>class Customer\r\n   @@no_of_customers = 0\r\n   def initialize(id, name, addr)\r\n      @cust_id = id\r\n      @cust_name = name\r\n      @cust_addr = addr\r\n   end\r\n   def display_details()\r\n      puts \"Customer id #@cust_id\"\r\n      puts \"Customer name #@cust_name\"\r\n      puts \"Customer address #@cust_addr\"\r\n   end\r\n   def total_no_of_customers()\r\n      @@no_of_customers += 1\r\n      puts \"Total number of customers: #@@no_of_customers\"\r\n   end\r\nend\r\n\r\n# Create Objects\r\ncust1 = Customer.new(\"1\", \"John\", \"Wisdom Apartments, Ludhiya\")\r\ncust2 = Customer.new(\"2\", \"Poul\", \"New Empire road, Khandala\")\r\n\r\n# Call Methods\r\ncust1.total_no_of_customers()\r\ncust2.total_no_of_customers()\r\n\r\n\r\n#This is the result\r\nTotal number of customers: 1\r\nTotal number of customers: 2</pre>\n             \n        <h3>Get instance and class methods and variables</h3>\n        <div>** Filter the search</div><pre>.grep(/whatever/)</pre><div><br><br></div><ul><li>All instance variables of a class A:</li></ul><pre>A.instance_variables</pre><div><br></div><ul><li>All instance variables of an instance of A:</li></ul><pre>a = A.new\r\na.instance_variables</pre><div><br></div><ul><li>All class variables of a class A:</li></ul><pre>A.class_variables</pre><div><br></div><ul><li>Instance methods of class A:</li></ul><pre>A.instance_methods</pre><div><br></div><ul><li>Instance methods of instance of class A:</li></ul><pre>a = A.new\r\na.methods</pre><div><br></div><ul><li>You have as well the methods \"private_methods\" (for class private methods) and \"private_instance_methods\" (for private instance methods of the class)</li></ul>\n             \n        <h3>classes and modules</h3>\n        <div>Classes are modules that you can instantiate. Normally you use modules when you want to include them somewhere -and add methods- and we use classes when you want to instantiate it and/or do inheritance.</div>\n             \n        <h3>namespaces</h3>\n        <div>To avoid collisions with the name of classes. Normally are set putting classes within modules</div>\n             \n        <h3>Include module</h3>\n        <pre>class MyClass\r\n  include MyModule\r\nend</pre><div><br>Will include all the methods of the module in the instance of the class.</div><ul><li>It's methods will be included in the methods that inherit from MyClass</li><li>Modules are included as well when calling the method \"ancestors\"</li><li>There is a similar method to \"include\" which is \"prepend\". It's just the same but instead of putting the method above in the herarchy, it puts it below.</li></ul>\n             \n        <h3>extend vs include a module</h3>\n        <ul><li>\"include\" add the methods to the class</li><li>\"extend\" add the methods just to that instance:</li></ul><div><br>my_instance.extend(MyModule)</div>\n             \n        <h3>Object system schema</h3>\n        <div>class is the class that instantiate the object<br>superclass is the parent class of the class, so it's characteristics are inherited<br>in this way you can see that the classes are objects as well, meaning instances of another class<br><br><action-text-attachment content-type=\"image\" url=\"https://www.planttext.com/api/plantuml/img/SoWkIImgAStDuGA1_AIirEGI1V-aB4CajX6CxLlfd9DON8ma1QHWF1Gft_oKqfnKBYwGIGgwkdOmhGfM2ibWTI1ZiKh0-20vY0L0gUBIWjGYJ7bKdGXnYEse-Y308JKl1UXP0000\" width=\"220\" height=\"386\"></action-text-attachment><br>And more complete:<br><br><action-text-attachment content-type=\"image\" url=\"https://www.planttext.com/api/plantuml/img/SoWkIImgAStDuGA1_AIirEGI1V-aB4CajX6CxLlfd9DON8ma1QHWF1Gft_oKqfnKBYwGIGgwkdOmhGfM2ibWTI1ZiKh0-20vY0L0gUBIWjGYJ7bKdGXnYEse-d3fWjg1AG4r19Sx8C0XDIy567W0\" width=\"239\" height=\"497\"></action-text-attachment><br><br></div>\n             \n        <h3>Constants</h3>\n        <div>Everything that begins with an uppercase letter, including names of classes and modules, is a constant. It is pretty much like a variable, with a HUGE difference. They have scope!!!<br><br>Notice how the constants are not the same (event though the reference to the same)<br><br><action-text-attachment content-type=\"image\" url=\"https://www.planttext.com/api/plantuml/img/SoWkIImgAStDuGA1_AIirEGI1TzAt_oKqfnK1Dyv9x6u68cRdmVKbrTYY2banCK5qwwWgsi7rmkbOM9m0z0L8um10uVKl1IWwm00\" width=\"222\" height=\"241\"></action-text-attachment></div>\n             \n        <h3>About the path of the classes and all that crap</h3>\n        <div>This example makes it pretty clear:<br><br></div><pre><strong>module </strong>M \r\n  <strong>class </strong>C\r\n    X = <em>'a constant'\r\n  </em><strong>end </strong>C::X <em># =&gt; \"a constant\"\r\n</em><strong>end\r\n</strong><br>M::C::X <em># =&gt; \"a constant\"</em></pre><div><br></div>\n             \n        <h3>modules and ancestor chain</h3>\n        <div>When you \"include\" a module in a class -or even in another module-, Ruby inserts the module in the ancestors chain, right above the including class itself.<br><br>When you do the same but with \"prepend\" it happens exactly the same, but the module get inserted inmediatelly after the class in the ancestor chain.<br><br>You can check the ancestors chain of a class -not an instance- using the method \"ancestors\":<br><br>MyClass.ancestors<br><br>If you want to do it of an instance, obviously you can use myclass_instance.class.ancestors</div>\n             \n        <h3>Kernel</h3>\n        <div>Kernel is a module \"included\" in Object. This means that it's instance methods (and private instance methods) can be call in every class as \"program methods\". For example \"print\". This is the way Ruby manages to have programs methods. You could call them with self.print but as you can ignore the \"self\" they look like program methods: eg: print \"tu puta madre\"</div>\n             \n        <h3>self</h3>\n        <div>references the \"current\" object</div>\n             \n        <h3>instance and class public and private methods</h3>\n        <div>Instance method  =&gt; can only be called in an instance<br>Class method =&gt; can only be called in a class (pretty much like \"static\" in javascript)<br><br>examples:<br><br>my_instance.my_instance_method<br>MyClass.my_class_method<br><br></div><pre>class MyClass\r\n  def my_instance_method\r\n  end   \r\n  \r\n  def self.my_class_method\r\n  end\r\nend</pre><div><br>Public method =&gt; can be called is the instance or the class directly -depending of if it's a instance of class method-<br>Private method =&gt; have to be called from within another method of the instance or the class -depending of if it's an instance or a class method-<br><br>examples:<br><br></div><pre>class MyClass\r\n  def my_instance_method\r\n  end   \r\n  \r\n  def self.my_class_method\r\n  end\r\n\r\n  private\r\n\r\n  def my_private_instance_method  \r\n  end\r\n\r\n  <strong>class</strong> <strong>&lt;&lt;</strong> self\r\n    <strong>private</strong>\r\n\r\n    <strong>def</strong> my_private_class_method\r\n      [:bark, :roll_over, :fetch]\r\n    <strong>end</strong>\r\n  <strong>end</strong> \r\nend</pre><div><br>note how this WON'T work when creating a private class method:<br><br></div><pre>private\r\n\r\ndef self.my_private_class_method\r\nend</pre><div><br>other way to define private class method is using \"private_class_method like\" this:<br><br></div><pre><strong>class</strong> <strong>Dog</strong>\r\n  <strong>def</strong> <strong>self.tricks</strong>\r\n    [:bark, :roll_over, :fetch]\r\n  <strong>end</strong>\r\n\r\n  private_class_method :tricks\r\n<strong>end</strong></pre><div><br>or like this -very similar-<br><br></div><pre><strong>class</strong> <strong>Dog</strong>\r\n  private_class_method <strong>def</strong> <strong>self.tricks</strong>\r\n    [:bark, :roll_over, :fetch]\r\n  <strong>end</strong>\r\n<strong>end</strong></pre><div><br>or using modules like this:<br><br></div><pre><strong>class</strong> <strong>Dog</strong>\r\n  <strong>module</strong> ClassMethods\r\n    <strong>private</strong>\r\n\r\n    <strong>def</strong> <strong>tricks</strong>\r\n      [:bark, :roll_over, :fetch]\r\n    <strong>end</strong>\r\n  <strong>end</strong>\r\n\r\n  <strong>extend</strong> ClassMethods\r\n<strong>end</strong></pre>\n             \n        <h3>Dynamic dispatch</h3>\n        <div>With the \"send\" method you can trigger any method any Class, Module or instance.<br><br>MyClass.send(:my_class_method, arg1, arg2, arg3)<br><br>This has the advantage that you can wait until the very last minute to decide the method that you want to call and you can decide it dynamically.<br><br>** \"send\" has the capacity to call public and private methods. The \"public_send\" method version of the method only can call public methods </div>\n             \n        <h3>Define methods dynamically</h3>\n        <div>You can define a method dynamically with \"define_method\".<br><br></div><pre><strong>class</strong> <strong>Developer</strong>\r\n\r\n  [\"frontend\", \"backend\"].each <strong>do</strong> |method|\r\n    define_method \"coding_#{method}\" <strong>do</strong>\r\n      p \"writing \" + method.to_s\r\n    <strong>end</strong>\r\n  <strong>end</strong>\r\n\r\n<strong>end</strong>\r\n\r\ndeveloper = Developer.new\r\n\r\ndeveloper.coding_frontend\r\n<em># \"writing frontend\"</em>\r\n\r\ndeveloper.coding_backend\r\n<em># \"writing backend\"</em></pre>\n             \n        <h3>method_missing</h3>\n        <div>\"method_missing\" is a private instance method of BasicObject that every object inherits.<br>All this methods does is triggering a \"NoMethod\" error whenever we call a method that doesn't exist.<br><br>Each message landing on \"method_missing\" includes the name of the method that. was calles, plus any arguments and blocks associated with the call.<br><br>**Overriding \"method_missing\" allows you to call methods that don't really exist.<br><br>So you can do something like this:<br><br></div><pre>class MyClass\r\n  def missing_method(name, *args)\r\n    'the method: #{name} is not found, lets do something with it'\r\n  end\r\nend</pre><div><br>One of the problems that you might have with this is that you have a real \"method_missing\" error with this class, it will swallow it and will be very difficult to track.<br><br></div>\n             \n        <h3>Blank slates</h3>\n        <div>It might happen to you that you run in a problem like this:<br><br></div><pre>class MyClass\r\n  def my_method\r\n    'whatever'\r\n  end\r\nend\r\ni = MyClass.new\r\ni.display //nil</pre><div><br>Instead of \"NoMethodError\" we are getting \"nil\". Why? It is because \"display\" is a method of object, which obviously is in the ancestors chain so the method is found, even though we wouldn't expect that to happen.<br><br>If you don't specify a superclass, your classes inherit by default from \"Object\" which superclass is \"BasicObject\". <br><br>You can have a blank slate class inheriting from BasicObject: class MyClass &lt; BasicObject or you can remove the methods that you want from the class:<br><br></div><ul><li>undef_method whatever_method: will remove the method from the class and inherited ones</li><li>remove_methos whatever_method: will only remove methods from the class, not inherited, which probably makes it useless for this case but is good that you know about this one</li></ul>\n             \n        <h3>access of variables from an outer scope</h3>\n        <div>Unlike javascript, in Ruby you can't access variables from an outer scope -unless they are global variables ($) class variables (@@) or instance variables (@)-<br><br></div><pre>class Pepe\r\n  name = 'Pepe'\r\n  def say_name\r\n    puts name\r\n  end\r\nend\r\np = Pepe.new\r\np.say_name #Error</pre>\n             \n        <h3>Scope gates and flattening the scope</h3>\n        <div>Places where a program leaves the old scope behind and opens a new one:<br><br></div><ul><li>Class definitions -keyword \"class\"-</li><li>Modules definitions -keyword \"module\"-</li><li>Methods -keyword \"def\"-</li></ul><div><br></div><pre>v1 = 1\r\n<strong>class </strong>MyClass #scope gate entering class\r\n v2 = 2\r\n local_variables\r\n <strong>def </strong>my_method #scope gate entering method\r\n   v3 = 3\r\n   local_variables \r\n <strong>end #scope gate leaving method\r\n</strong>  local_variables\r\n<strong>end #scope gate leaving class</strong></pre><div><br>But we can write exactly this code eliminating all the scope gates:<br><br></div><pre>v1 = 1\r\nMyClass = Class.new do\r\n  v2 = v2\r\n  define_method :my_method do\r\n    v3 = 3\r\n  end\r\nend</pre><div><br>voila! all variables are accessible from inner scopes now</div>\n             \n        <h3>Closure</h3>\n        <div>A closure is a first-class function with an environment. The environment is a mapping to the variables that existed when the closure was created. The closure will retain its access to these variables, even if they’re defined in another scope.<br><br></div><div>Ruby doesn’t have first-class functions, but it does have closures in the form of blocks, procs and lambdas. Blocks are used for passing blocks of code to methods, and procs and lambda’s allow storing blocks of code in variables.<br><br>Example of closure using a block:<br><br></div><pre><strong>def </strong>my_method<br> x = <em>\"Goodbye\" </em><strong>yield</strong>(<em>\"cruel\"</em>)\r\n<strong>end\r\nx </strong>= <em>\"Hello\"\r\n</em><br>my_method {|y| <em>\"</em>#{x}<em>, </em>#{y} <em>world\" </em>} <em># =&gt; \"Hello, cruel world\" </em></pre><div><br>As you can see, the block takes the x variable from the scope where it is defined and carries it with it to a different scope, ignoring the \"x\" value in the scope where is called.</div>\n             \n        <h3>instance_eval() and instance_exec()</h3>\n        <ul><li>instance_eval evaluates a block in the context of an existing instance. </li></ul><div><br></div><pre><strong>class </strong>MyClass <strong>def </strong>initialize \r\n@v = 1 \r\n<strong>end end </strong>\r\nobj = MyClass.new \r\nobj.instance_eval <strong>do\r\n</strong>self <em># =&gt; #&lt;MyClass:0x3340dc @v=1&gt; </em>@v <em># =&gt; 1 </em>\r\n<strong>end </strong></pre><div><br></div><ul><li>instance_exec is the same but let's you pass params to that env:</li></ul><div><br></div><pre><strong>class </strong>C\r\n  <strong>def </strong>initialize \r\n    @x = 1 \r\n  <strong>end\r\nend \r\n\r\nclass </strong>D\r\n<strong>def </strong>twisted_method \r\n@y = 2 \r\nC.new.instance_exec(@y) {|y| <em>\"@x: </em>#{@x}<em>, @y: </em>#{y}<em>\" </em>} <strong>end </strong>\r\n<strong>end \r\n</strong>\r\nD.new.twisted_method <em># =&gt; \"@x: 1, @y: 2\" </em></pre>\n             \n        <h3>Callable objects -you can call them using \"call\"-</h3>\n        <ul><li>Blocks</li><li>Procs</li><li>Lambdas (Lambdas are Procs created with a lambda. So are basically Procs, but with some small difference)</li><li>Methods</li></ul>\n             \n        <h3>Procs (this includes lambdas)</h3>\n        <div>In Ruby most of stuff are objects. Well, blocks are NOT. Proc is a block that has been turned into an object.<br>In this way the block becomes \"first class citizen\" and you can defer the call to whenever you want to.<br><br>Ways to create a Proc (or which is the same, to convert a block to a Proc):<br><br></div><pre>inc = Proc.new {|x| x + 1}\r\ndec = lambda {|x| x + 1} // exactly the same as the next line\r\ndec = -&gt;(x) {|x| x + 1}</pre><div><br>There is another way to convert a block to a Proc, the \"&amp;\" operator. It is used when executing the block with \"yield\" is not enough, and this can happen in two cases:<br><br></div><ul><li>You want to pass the block to another method (or even another block)</li><li>You want to convert the block to a Proc</li></ul><div><br>The way to do this is to pass a special argument to the method. This must be that last argument and prefixed with \"&amp;\":<br><br></div><pre><strong>def </strong>math(a, b)\r\n <strong>yield</strong>(a, b) \r\n<strong>end </strong>\r\n<strong>def </strong>do_math(a, b, &amp;operation)\r\n math(a, b, &amp;operation) \r\n<strong>end \r\n</strong>\r\ndo_math(2,3){|x,y|x*y} <em>#=&gt;6</em></pre><div><br>What it actually does is convert a block to a Proc and vice-versa. So what you have in operation is already a Proc. But if you have a Proc and want to convert it to a block, you can do it as well, this way:<br><br></div><pre><strong>def </strong>my_method(greeting)\r\n <em>\"</em>#{greeting}<em>, </em>#{<strong>yield</strong>}<em>!\"\r\n</em><strong>end\r\n</strong><br>my_proc = proc { <em>\"Bill\" </em>}\r\nmy_method(<em>\"Hello\"</em>, &amp;my_proc) <br></pre><div><br></div>\n             \n        <h3>Differences between Procs and Lambdas (Procs created with lambda)</h3>\n        <div>There is only two important differences -and many small ones that we are not going to talk about-<br><br></div><ul><li>When using <strong>explicit</strong> return (there is not difference with the implicit return):</li></ul><div><br></div><pre><strong>def </strong>double(callable_object)\r\n callable_object.call * 2\r\n<strong>end\r\n\r\n</strong>l = lambda { <strong>return </strong>10 }\r\ndouble(l) <em># =&gt; 20</em></pre><div><em><br></em>In a proc, return behaves differently. Rather than return from the proc, it </div><div>returns from the scope where the proc itself was defined: <br><br></div><pre><strong>def </strong>another_double<br> p = Proc.new { <strong>return </strong>10 }\r\n result = p.call\r\n <strong>return </strong>result * 2 <em># unreachable code!\r\n</em><strong>end </strong>another_double <em># =&gt; 10 </em></pre><div><br></div><div>If you’re aware of this behavior, you can steer clear of buggy code like this: <br><br></div><pre><strong>def </strong>double(callable_object)\r\n callable_object.call * 2\r\n<strong>end\r\n\r\n</strong>p = Proc.new { <strong>return </strong>10 }\r\ndouble(p) <em># =&gt; LocalJumpError </em></pre><div><br><br></div><ul><li>When passing a wrong number of arguments</li></ul><div>Procs are more forgiving than Lambdas. <br><br>So, summarizing, just use lambdas, they seem to be better in general.</div>\n      ,<h1>Almanac</h1>       \n        <h3>Ruby questions</h3>\n        <ul><li>What does mean that in Ruby everything is an object? Is that good or bad?</li><li>What is Rack?</li><li>How to deal with money in Ruby?</li><li>Slim controllers and fat models, how to deal with that -helpers and all that stuff...-</li><li>How would you fix/avoid an N+1 query</li><li>What is rake? do not confuse with Rack, asshole</li></ul>\n             \n        <h3>Javascript / React questions</h3>\n        <ul><li>Explain \"this\"</li><li>Differences between === and ==</li><li>Differences between React and other frameworks</li><li>Ways to deal with app state management that are not Redux</li><li>xDOM, explain</li></ul>\n      ,<h1>Ruby way for a new job</h1>       \n        <h3>learn what a metaclass is</h3>\n        \n             \n        <h3>what is \"<<-EOS\"</h3>\n        \n             \n        <h3>learn all about rbenv and rvm, and differences</h3>\n        \n             \n        <h3>learn about the bundler</h3>\n        \n             \n        <h3>learn about the bundler</h3>\n        <div>this <a href=\"https://www.ombulabs.com/blog/ruby/learning/understanding-bundler.html\">link</a> looks good. And talks about $<strong>LOAD_PATH as well</strong></div>\n             \n        <h3>difference between bin/rails and bundle exec rails</h3>\n        \n             \n        <h3>create a new gem</h3>\n        \n      ,<h1>React way for a new job</h1>       \n        <h3>Read all documentation</h3>\n        \n             \n        <h3>Make a list of you favourites libraries</h3>\n        \n             \n        <h3>Make project with most impressive stuff</h3>\n        <div>That has to include typescript, obviously</div>\n             \n        <h3>Look for answers for interview/s questions</h3>\n        \n             \n        <h3>Make a comprehensive cheatsheet for Rspec</h3>\n        \n             \n        <h3>Test all Rspec weird stuff</h3>\n        \n      ,<h1>Interesting stuff to improve</h1>       \n        <h3>Make a comprehensive cheatsheet for Docker</h3>\n        \n             \n        <h3>Play around with Docker</h3>\n        \n             \n        <h3>When you create the new project, try to use:</h3>\n        <ul><li>First of all, think of the structure of the application</li><li>Think of the patterns to use</li><li>Decouple as much as you can</li><li>more...</li></ul>\n             \n        <h3>SSL</h3>\n        \n             \n        <h3>how to treat unknown unknowns -from Konrad presentation-</h3>\n        <div><action-text-attachment sgid=\"BAh7CEkiCGdpZAY6BkVUSSIyZ2lkOi8va2lyaWEvQWN0aXZlU3RvcmFnZTo6QmxvYi8xND9leHBpcmVzX2luBjsAVEkiDHB1cnBvc2UGOwBUSSIPYXR0YWNoYWJsZQY7AFRJIg9leHBpcmVzX2F0BjsAVDA=--e49f42b32b6d5b5189b1e7187562d92136ffabf7\" content-type=\"image/png\" url=\"https://flamyduck.com/rails/active_storage/blobs/redirect/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBFdz09IiwiZXhwIjpudWxsLCJwdXIiOiJibG9iX2lkIn19--bf101a6b43e0be1094585cb577943a40d3608a5c/Screenshot%202021-04-19%20at%2016.24.22.png\" filename=\"Screenshot 2021-04-19 at 16.24.22.png\" filesize=\"910649\" width=\"2074\" height=\"1214\" previewable=\"true\" presentation=\"gallery\"></action-text-attachment></div>\n             \n        <h3>CSS grid</h3>\n        \n             \n        <h3>Accesibility</h3>\n        \n             \n        <h3>definition of \"middleware\"</h3>\n        \n             \n        <h3>difference between a blob and a stream in javascript</h3>\n        \n      ,<h1>Design patterns</h1>       \n        <h3>The ones we are going to see in Jamie's call are:</h3>\n        <ul><li>Adapter</li><li>ActiveRecord (ORM - Object Relational Mapper)</li><li>DataMapper</li><li>Observer</li><li>Decorators</li><li>Delegate</li></ul>\n             \n        <h3>They fit to any language. Patterns are ways to store complexity in another place.</h3>\n        <div>Here you have a lot. Empapate esto.<br><br><a href=\"https://refactoring.guru/design-patterns/ruby\">https://refactoring.guru/design-patterns/ruby</a></div>\n             \n        <h3>ActiveRecord - ORM. Maps an object to a record in the db</h3>\n        <pre>class Person &lt; ApplicationRecord\r\n  #table_name: people\r\n\r\n  has_many :arms\r\n\r\n  def save\r\n  end\r\nend</pre><div><br>The difference with \"DataMapper\" is that DataMapper can only instantiate the objects from the db. ActiveRecord can save to the db as well.</div>\n             \n        <h3>Adapter</h3>\n        <div>If you have multiple services that you want to use through a public interface of a class.<br>You create an interface that works well for the classes that you want to adapt.<br><br>Useful to unify behaviour and to add methods useful for all the adapted classes.<br><br></div><pre>\r\nclass RepositoryAdapter\r\n  def list\r\n  end      def some_other_method\r\n  end\r\nclass GirhubAdapter &lt; BaseAdapter\r\n  def list (repo, branch: 'main')\r\n    Octokit.contents(repo, branch)\r\n  end\r\nend\r\n\r\nclass FileSystemAdapter &lt; BaseAdapter\r\n  def list (repo, branch: 'main')\r\n    Dir[\"#{repo}/#{branch}]\r\n  end\r\nend\r\n\r\nclass Project\r\n  attr_accesor :adapter\r\n  \r\n  def listing(repo, branch:) {    adapter.list(repo, branch: branch)\r\n  }\r\nend\r\n\r\nproject = Projet.new(adapter: RepositoryAdapter)\r\npath = project.listing('my-repo', branch: 'my-branch')</pre>\n             \n        <h3>Decorators</h3>\n        <div>They basically just decorate the outcome of methods<br><br></div><pre>class Person \r\n  attr_reader :name\r\n  \r\n  def initialize(name)\r\n    @name\r\n  end\r\n<br>  def birthdate\r\n    DateTime.new(''2021-01-01)    \r\n  end\r\n\r\n  def birthday?\r\n    person.birthdate.biginning_of_day == Time.noww.beginning_of_day\r\n  end\r\nend\r\n\r\nclass BirthdayDecorator\r\n  def initialize(name)\r\n    @name = name\r\n  end\r\n  \r\n  def greeting\r\n    \"Happy Birthday, {#name}!\"\r\n  end\r\nend\r\n\r\nclass Welcome\r\n  attr_accessor :person\r\n\r\n  def greet\r\n    return person.name unless birthday? \r\n    BirthdayDecorator.new(person.name).greetin    \r\n  end\r\nend\r\n\r\n<br>​Welcome.new(Person.new(name: 'Billy')).greet # \"Hello Billy\"\r\n<br>​# On Birthday.\r\nWelcome.new(Person.new(name: 'Billy')).greet # \"Happy Birthday, Billy!\"</pre>\n             \n        <h3>Observer</h3>\n        <div>It like React with Redux. Your components subscribe to events and when those events happen, they trigger an action in the subscribed element</div>\n             \n        <h3>Delegate</h3>\n        <div>Basically a way to execute a method from class B when a method from class A is called </div><pre>\r\nclass Child\r\n  attr_accessor :mother\r\n  delegate :last_name, to: :mother\r\n  \r\n  def first_name\r\n    'Billy'\r\n  end\r\nend</pre><div><br></div>\n             \n        <h3>Singleton</h3>\n        <div>A way to avoid to be sure that you have only one instance of a class.<br><br></div><pre>class Setting &lt; ApplicationRecord\r\n  private_class_method :new\r\n  def self.singleton\r\n    @singleton ||= find_or_create\r\n  end\r\nend\r\n\r\nSetting.singleton.update!(primary_color: 'red')</pre>\n             \n        <h3>Decoupling</h3>\n        <div>Decoupling the code gives you a lot of advantages:</div><ul><li>Easier to test</li><li>Provides inversion of control</li><li>Makes easier to change framework or technology if you want</li><li>Probably more useful in the FE than in the BE, because the BE changes more often.</li><li>It comes with a cost, as it makes the code easier to understand</li></ul>\n      ,<h1>Solid</h1>       \n        <h3>terms:</h3>\n        <ul><li>Rigid: you cant change a thing.</li><li>Fragile: it is rigid, but it doesn't look like</li><li>Viscous: you know what you should do, but it is easier to do the wrong thing</li></ul>\n             \n        <h3>doing design vs not doing it</h3>\n        <div><action-text-attachment sgid=\"BAh7CEkiCGdpZAY6BkVUSSIxZ2lkOi8va2lyaWEvQWN0aXZlU3RvcmFnZTo6QmxvYi85P2V4cGlyZXNfaW4GOwBUSSIMcHVycG9zZQY7AFRJIg9hdHRhY2hhYmxlBjsAVEkiD2V4cGlyZXNfYXQGOwBUMA==--01d1d7995c6596886c8ebbf2edd6f1daaba9b4a7\" content-type=\"image/png\" url=\"https://flamyduck.com/rails/active_storage/blobs/redirect/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBEZz09IiwiZXhwIjpudWxsLCJwdXIiOiJibG9iX2lkIn19--a93d1fd5eb8c45d0d355c60a65cb5a3a9d8255c4/Screenshot%202021-04-08%20at%2016.12.24.png\" filename=\"Screenshot 2021-04-08 at 16.12.24.png\" filesize=\"1512377\" width=\"2630\" height=\"1808\" presentation=\"gallery\"></action-text-attachment></div>\n             \n        <h3>SOLID stands for:</h3>\n        <ul><li>Single responsability</li><li>Open/Close</li><li>Liskov substitution</li><li>Interface segregation</li><li>Dependency Inversion</li></ul>\n             \n        <h3>Interface Independence</h3>\n        <div>Only make sense for typed languages. In dynamic languages we don't need this</div>\n             \n        <h3>Liskov Substitution</h3>\n        <div>It's about subclasses</div>\n             \n        <h3>Single responsability</h3>\n        <div>A class should only have one responsabillity. If we are doing TDD, we will see, when we do the test, that it has more than one responsability. So we have to modify our design.<br><br>A good way to achive the single responsability y with dependency injection</div>\n             \n        <h3>Change your code until it follows this 4 things:</h3>\n        <ul><li>Is it DRY?</li><li>Does it has one responsability?</li><li>Does all the code change at the same rate? &lt;-- fix with dependency injection</li><li>Does it depend on things that change less often than it does?</li></ul>\n             \n        <h3>So do not get confident</h3>\n        <ul><li>TDD is not enough</li><li>DRY is not enough</li></ul><div><br>You should create an application in a way that it lasts for a long time</div>\n             \n        <h3>High dependable stuff should depend in stuff that in not like to change, and not the other way around</h3>\n        \n      ,<h1>CORS</h1>       \n        <h3>Basics</h3>\n        <ul><li>Modern browsers block cross-origin requests by default</li><li>Code executed on different domains, protocols or ports have different origins. A request between them is a \"cross-origin\".</li><li>CORS does not prevent cross-origin requests. It allows them when configured so.</li></ul>\n             \n        <h3>How it works basics</h3>\n        <div>The browser sends a set of CORS headers to the cross-origin server which returns specific header values in the response. Based on the header values returned in the response from the cross-origin server, the browser provides access to the response or blocks the access by showing a CORS error in the browser console<br><br></div><div>!! The request has a header <strong>Origin </strong>-it's there already, you don't need to add it-. The server processes the request and sends back a response with a header <strong>Access-Control-Allow-Origin</strong>.<br><br>The browser checks the value of <strong>Access-Control-Allow-Origin in the response and renders that response only if it's value is the same as the Origin header sent on the request.</strong></div>\n             \n        <h3>Type of CORS requests sent by a browser</h3>\n        <div>There is 3 different kinds of CORS requests depending of the kind of operation that the browser wants to perform in the cross-origin server:<br><br>- simple<br>- preflight<br>-request with credentials</div>\n             \n        <h3>Simple CORS requests (GET, POST and HEAD)</h3>\n        <div>It doesn't trigger a CORS preflight. BUT IT STILL NEEDS TO MATCH Origin AND Access-Controll-Allow-Origin. It just doesn't send the preflight.<br>It needs to meet ALL the following conditions:<br>- be GET, POST or HEAD<br>- the only headers that can be manually set in the request are:</div><ul><li>Accept</li><li>Accept-Language</li><li>Content-Language</li><li>Content-Type (the only allowed values for Content-Type are the following:)</li></ul><div>  - application/x-www-form-urlencoded<br>  - multipart/form-data<br>  - text/plain<br>- no event listeners are registered to the XMLHttpRequest (like for example XMLHttpRequest.upload)<br>- no ReadableStream is used in the request</div>\n             \n        <h3>Preflight requests</h3>\n        <div>For requests that intend to change something in the server -as a PUT or a DELETE-<br>The preflight request is an OPTION method sent to the cross-origin server so the server checks if it's going to allow the request. <br>Along with the preflight request the browser sends the following headers:</div><ul><li>Access-Control-Request-Method: http method of the actual request</li><li>Access-Control-Request-Headers: A list of geaders that will be sent with the request including any custom headers</li><li>Origin: same as in simple request</li></ul>\n             \n        <h3>CORS requests with credentials</h3>\n        <div>For requests with access credentials (like an Authorization header or cookies) the browser will not allow to access the response unless the server sends a CORS header Access-Control-Allow-Credentials with a value of true</div>\n      ,<h1>React + Rails API</h1>       \n        <h3>Here is a simple guide, centered is fixing the CORS</h3>\n        <div><a href=\"https://medium.com/ruby-daily/understanding-cors-when-using-ruby-on-rails-as-an-api-f086dc6ffc41\">https://medium.com/ruby-daily/understanding-cors-when-using-ruby-on-rails-as-an-api-f086dc6ffc41</a></div>\n      ,<h1>Dockerfile</h1>       \n        <h3>Basics</h3>\n        <div>The<strong> .dockerfile</strong> create images that we run.<br>By default the commands ran within docker are ran by the root user, so we don't need use \"sudo\".<br>The source path of our local machine is always relative to where our dockerfile is located.</div>\n             \n        <h3>Basic commands</h3>\n        <ul><li>FROM ==&gt; Initial image</li><li>RUN ==&gt; Runs a command</li><li>COPY . whateverpath ==&gt; Copies a file or directory from your computer directory to the container directory. The first param is the local directory (your computer) and the second one is inside docker filesystem.</li><li>WORKDIR ==&gt; It moves to that directory, so whatever we run after that will happen there. The last one will set which is the initial working directory for containers created from the image.</li><li>CMD [\"bin/rails\", \"s\",  \"-b\", \"0.0.0.0\"] ==&gt; Default command to run when the container is started from the image. It can be overwritten if we pass a command when you issue the \"docker run\" command.</li><li>LABEL ==&gt; Adds identifiers in &lt;key&gt;=&lt;value&gt; format.</li></ul>\n             \n        <h3>.dockerignore</h3>\n        <div>This file needs to exist so we only send the right files from the directory to make the build.<br><br>Example:<br><br></div><pre># Git\r\n.git\r\n.gitignore\r\n\r\n# Logs\r\nlog/*\r\n\r\n#Temp files\r\ntmp/*\r\n\r\n# Editor temp files\r\n*.swp\r\n*.swo</pre>\n      ,<h1>Docker-compose</h1>       \n        <h3>What it is used for</h3>\n        <div><strong>Compose</strong> is a tool for defining and running multi-container <strong>Docker</strong> applications. With <strong>Compose</strong>, you <strong>use</strong> a YAML file to configure your application's services. Then, with a single command, you create and start all the services from your configuration.</div>\n             \n        <h3>docker-compose.yml</h3>\n        <div>It contains the config for the containers managed. It doesn't replace <strong>.dockerfile<br></strong><br>Example:<br><br></div><pre>version: '3' &lt;-- version of docker compose that we are using\r\n\r\nservices: &lt;-- containers\r\n\r\n  web: &lt;--first container (and then the instructions)\r\n    build: . &lt;-- tells compose where to find the Dockerfile it should use\r\n# to build our image (path relative to this file)  \r\n    ports: &lt;-- equivalent to the \"-p\" command for docker\r\n      - \"3000\":\"3000\"\r\n    volumes: &lt;-- create volumes\r\n      - .:/usr/src/app\r\n    env_file: &lt;-- so we can connect out Rails app to the db\r\n      - .env/development/database\r\n      - .env/development/web\r\n\r\n  redis: &lt;-- we won't specify ports because we don't want redis to be accessed externally\r\n    image: redis &lt;-- does kind of the same than \"build\" used before, but insteas uses a\r\n# preexistent image (in this case a dockerhub one)\r\n\r\n  database:\r\n    image: postgres\r\n    env_file: &lt;-- global variables for the db\r\n      - .env/development/database\r\n    volumes: db_data:/var/lib/postgresql/data &lt;-- mapping the volume (in this case a named\r\n# volume defined right after in this file)\r\n\r\nvolumes: &lt;-- defines the \"named volumes\"\r\n  - db_data &lt;-- not sure about the syntax in this one</pre>\n      ,<h1>Docker commands</h1>       \n        <h3>docker run [OPTION] <image> <command></h3>\n        <div>Starts a new container based on an image and executes the command inside the container.<br><br>Example: (--rm removes the container once it stops)<br><br></div><pre>docker run --rm ruby:2.6 ruby -e \"puts :hello\"</pre>\n             \n        <h3>docker ps</h3>\n        <div>List of <strong>running</strong> container. </div><pre>\r\ndocker ps</pre><div><br>List of ALL containers, including the stopped ones:</div><pre>\r\ndocker ps -a</pre>\n             \n        <h3>docker rm <container_id_1> <container_id_2> ...</h3>\n        <div>Removes this containers.</div>\n             \n        <h3>docker images</h3>\n        <div>Lists all the images.</div>\n             \n        <h3>docker system prune</h3>\n        <div>Free up all resources in one go (removes all non used containers, images, etc...)</div>\n             \n        <h3>docker build</h3>\n        <div>Builds an image from a custom .dockerfile. It doesn't output a file, just adds the image to the list of images that docker knows about.<br> <br>If we are in the same directory as the .dockerfile, running <strong>docker build</strong> is enough.<br><br></div><pre>docker build</pre><div><br>If we are not , we have to indicate the path:<br><br></div><pre>docker build [options] path/to/build/directory</pre><div><br>We can name and tag images when building as well:<br><br></div><pre>docker build -t &lt;name_for_image_1&gt; -t &lt;name_for_image_2:tag_as_well_if_we_want&gt; -t ...</pre><div><br><br></div>\n             \n        <h3>docker inspect container_id_or_name</h3>\n        <div>Gives you all the info about that container (IP address and way more)</div>\n             \n        <h3>docker version</h3>\n        <div>Gives you the docker version, obviously.</div>\n             \n        <h3>Interactive bash</h3>\n        <div>Docker is designed to run just one command. so when we want to run several the way to go is lunch a bash shell like this:<br><br></div><pre>docker run &lt;options&gt; [image:version] bash -c 'command1 &amp;&amp; command2 &amp;&amp; ...'</pre>\n             \n        <h3>A couple of explained examples</h3>\n        <ul><li>Create a container that is going to be removed once it's closed, create a volume and run a interactive bash:</li></ul><div><br>-i : forwards out Docker CLI input to the Docker deamon<br>-t : creates a terminal emulator (or pseudoterminal) that sits on bash<br>--rm : removes the container once it's stopped<br>-v : creates a volume that will mirror our actual directory with the /usr/src/app &lt;-- this is the path inside docker.<br>ruby:2.6 : is the image we use to create the container<br><br></div><pre>docker run -i -t --rm -v ${PWD}:/usr/src/app ruby:2.6 bash</pre><div><br><br></div><ul><li>Playing with ports:</li></ul><div><br>-p 3000:3000 : directs the docker inside port (the second one) to the one in out machine (the first one)<br>-b 0.0.0.0 : tells docker to respond to requests coming from ALL IP addresses -otherwise it would only responde to it's own localhost- * 0.0.0.0 is a special IP address that means \"all IPv4 addresses on this machine\"</div><div><br></div><pre>docker run -p 3000:3000 docker_image_id_or_name bin/rails s -b 0.0.0.0</pre><div><br></div>\n             \n        <h3>Access container with bash </h3>\n        <div>- If the container closes and you want to inspect it anyway (preventing that it closes): <br>docker run -it --entrypoint=/bin/bash nameImage<br><br>- If that container is actually running:<br>docker exec nameImage bash</div>\n      ,<h1>Docker-compose commands</h1>       \n        <h3>docker-compose up</h3>\n        <div> - creates a separate network host for the app<br> - creates all non locally mounted volumes<br> - builds all images with a \"build\" directive<br> - creates a container for each service<br> - launches a container for each service<br><br>Starting container in \"dettach\" mode:<br><br></div><pre>docker-compose up -d</pre><div><br>The same but initializing the \"web\" container from the scratch:<br><br></div><pre>docker-compose up -d --force-recreate web</pre><div><br></div>\n             \n        <h3>docker-compose stop</h3>\n        <div>Stops all containers.<br><br>To stop only some: <br><br></div><pre>docker-compose stop &lt;service_name&gt;</pre>\n             \n        <h3>docker-compose restart <service_name></h3>\n        <div>To restart a service. Useful if we have done some changes in the config or something like that.</div>\n             \n        <h3>extra info</h3>\n        <ul><li>Compose will only build images if they don't exist. you are responsable to build images as needed (!!)</li></ul>\n             \n        <h3>docker-compose ps</h3>\n        <div>List all containers</div>\n             \n        <h3>docker-compose logs -f web</h3>\n        <div>Shows the container/s logs, in this case for the \"web\" container</div>\n             \n        <h3>docker-compose down</h3>\n        <div>Stops the containers and remove the network and volumes of the app</div>\n             \n        <h3>docker-compose rm</h3>\n        <div>Removes all the container of the app<br><br>If you want to remove only one:<br><br></div><pre>docker-compose rm &lt;service_name&gt;</pre>\n             \n        <h3>docker-compose exec <container_name> <whatever_command></h3>\n        <div>Runs a command within a container that is already running</div>\n             \n        <h3>docker-compose build <service_name></h3>\n        <div>Builds or rebuilds an container from the image -all containers build from images, so...-</div>\n             \n        <h3>Some examples that I don't understand that well</h3>\n        <div> What we are explaining here is the \"-h redis\". this says \"connect redis-cli to the hostname with DNS name 'redis'\".<br><br></div><pre>docker-compose run --rm redis redis-cli -h redis</pre><div><br>Initialize the database container and run the command \"psql -u postgres -h database\" (initializing a client in the hostname \"database\" &lt;-- so connects to the container running the \"database\" service)<br><br></div><pre>docker-compose run --rm database psql -U postgres -h database</pre><div><br>By default \"docker-compose run\" will ignore the ports mapping specified in out docker-compose.yml file. With \"--service-ports\" we ensure that they are mapped.<br><br></div><pre>docker-compose run --service-ports web</pre>\n      ,<h1>Things to finish this app</h1>       \n        <h3>Break line in the comment when the text is code -it makes the card too big-</h3>\n        \n             \n        <h3>create a bucket to store the images</h3>\n        \n             \n        <h3>fix the problem with the password when editing account</h3>\n        \n             \n        <h3>add a free email service so it sends you an email when you want to recover the password</h3>\n        \n             \n        <h3>Add pointer to the + button</h3>\n        \n             \n        <h3>Add a Footer</h3>\n        \n      ,<h1>Ideas for applications</h1>       \n        <h3>Website to look for band members or for people to look for bands</h3>\n        <ul><li>User entity</li><li>Band entity</li><li>Advert entity</li></ul><div><br>The app needs to manage Google maps to calculate distances.<br>Create a board with summarize notes for the area (use svg for this)<br>Have retro-pixeled styles<br>Find a way to use the fucking calendar</div>\n      ,<h1>Linux commands</h1>       \n        <h3>echo</h3>\n        <div>prints whatever you white afterwards</div>\n             \n        <h3>bash -stands for \"Bourne again shell\"-</h3>\n        <div>almost all Linux distributions default to <strong>bash </strong>for the terminal</div>\n             \n        <h3>pwd -print working directory-</h3>\n        <div>gives you your current path</div>\n             \n        <h3>cd -change directory-</h3>\n        <ul><li>cd .   current directory</li><li>cd ..   parent directory</li><li>cd ~   home directory (/home/sergio)</li><li>cd -   previous directory</li></ul>\n             \n        <h3>ls -list directories-</h3>\n        <ul><li>ls     only visible ones</li><li>ls -a   all, visible and invisible</li><li>ls -l   l for long, so gives you info about permissions and more</li><li>ls -al   the two things together</li></ul>\n             \n        <h3>touch</h3>\n        <div>You can create a file like this: touch mysuperduperfile<br>It is used as well to change timestamps in existing files and directories</div>\n             \n        <h3>file</h3>\n        <div>eg: file banana.jpg<br>Tells you what kind of file that is and gives you more info about it</div>\n             \n        <h3>cat -concatenate-</h3>\n        <div>Used basically to see the content of files:<br>cat dogfile.txt</div>\n             \n        <h3>less -it shows the whole file, so it's ironic-</h3>\n        <div>eg: less /home/pete/Documents/text1<br><br>And then you can use this to navigate through the file:<br><br></div><ul><li>q - Used to quit out of less and go back to your shell.</li><li>Page up, Page down, Up and Down - Navigate using the arrow keys and page keys.</li><li>g - Moves to beginning of the text file.</li><li>G - Moves to the end of the text file.</li><li>/search - You can search for specific text inside the text document. Prefacing the words you want to search with /</li><li>h - If you need a little help about how to use less while you’re in less, use help.</li></ul>\n             \n        <h3>history commands</h3>\n        <ul><li>history ==&gt; gives you a list of the commands that you have used, in inverse order</li><li>!! ==&gt; runs the last command that you ran</li><li>ctr + R ==&gt; reverse search, matching the commands depending of what you type</li></ul><div><br></div>\n             \n        <h3>clear</h3>\n        <div>clears all lines, just like alt + K</div>\n             \n        <h3>cp -copy-</h3>\n        <ul><li>cp mycoolfile /home/pete/Documents/cooldocs ==&gt; renames the first file with the second param path</li><li>cp *.jpg /home/pete/Documents/coodocs ==&gt; wildcard para renombrar todo lo que termine en \".jpg\"</li><li>cp -r Pumpkin/ /home/pete/Documents ==&gt; Para copiar recursivamente todo el contenido de un directorio</li><li>cp -i mycoolfile /home/pete/Pictures ==&gt; I'll will notify you before overwritting if that's the case</li></ul>\n             \n        <h3>mv -move-</h3>\n        <div>User for moving files and renaming them. Quite similar to the cp command.<br>The only different behaviour I could find is this -and quite interesting-<br><br>mv -b directory1 directory2  ==&gt; Instead of copies it will rename the new ones with a \"~\" prefix<br><br></div>\n             \n        <h3>mkdir -make directory-</h3>\n        <div>mkdir books painting ==&gt; you can create several directories at the same time<br>mkdir -p books/que/paish ==&gt; you can create subdirectories as well with \"-p\"</div>\n             \n        <h3>rm -remove-</h3>\n        <ul><li>rm file ==&gt; removes file</li><li>rm -r directory ==&gt; to remove directories</li><li>rmdir directory ==&gt; exactly the same</li><li>rm -f ==&gt; force to remove, ignoring protections -if you have the right permissions-</li><li>rm -i ==&gt; gives you a prompt before removing</li><li>rm -rfi ==&gt; you can combine all this stuff</li></ul>\n             \n        <h3>find</h3>\n        <div>find /home -type d -name MyFolder ==&gt; in the type it indicates that it is looking for a directory and the name is the name of the directory that we want to find</div>\n             \n        <h3>help</h3>\n        <div>help echo<br>or <br>echo --help<br><br>is the same</div>\n             \n        <h3>man -manual-</h3>\n        <div>Manual of whatever command you write after.<br>eg: man ls // man cp // ...</div>\n             \n        <h3>whatis</h3>\n        <div>Brief description of what the command does</div>\n      ,<h1>Linux text commands</h1>       \n        <h3>stdout (standard out) -- stdin (standard in) -- stderr (standard error)</h3>\n        <ul><li>stdout</li></ul><div><br>echo Hello world &gt; canijo.txt   ==&gt; modifies the stdout and, instead of print it -standard- put it inside canijo.txt. If the file doesn't exists, it's created. It will overwrite whatever is in that file.<br><br>echo Hello killo &gt;&gt; canijo.txt  ===&gt; same but won't override, will add the text to the end<br><br></div><ul><li>stdin</li></ul><div><br></div><div>you can modify the stdin as well. In this case instead of taking the code from \"echo\" it takes it from a file:<br><br>cat &lt; peanuts.txt &gt; banana.txt<br><br></div><ul><li>stderr</li></ul><div><br>can be modified as well, but probably not very important</div>\n             \n        <h3>pipe (|) and tee</h3>\n        <ul><li>pipe takes the stdout of a command and pass it as the stdin for another process</li></ul><div><br>ls -as | less<br><br></div><ul><li>tee let us write the output of a command in two different streams:</li></ul><div><br>ls | tee peanuts.txt   ==&gt; will print the result and will put it in peanuts.txt as well.</div>\n             \n        <h3>env -Environment-</h3>\n        <div>env  ==&gt; displays a list of our global variables<br><br>if you want to check a global var in particular:<br><br>echo $USER   ==&gt; we just have to put \"$\" in front of the name of the variable</div>\n             \n        <h3>head</h3>\n        <div>displays the first 10 lines of a file:<br><br>head /var/log/syslog<br><br>you can modify the number of lines to be displayed:<br><br>head -n 15 /var/log/syslog</div>\n             \n        <h3>tail </h3>\n        <div>tail is like head but will display the last 10 lines of a file.<br><br>tail -n 15 /var/log/syslog   ==&gt; and you can modify the number of lines as well<br><br><strong>IMPORTANT!!<br><br>tail -f will follow the file as it grows   ==&gt; very useful to read logs !!</strong></div>\n             \n        <h3>wc -word count- </h3>\n        <div>wc displays the number of lines, words and bytes:<br><br></div><pre>$ wc /etc/passwd\r\n\r\n 96     265    5925 /etc/passwd</pre>\n             \n        <h3>grep</h3>\n        <div>It allows you to search files for characters that catch a certain pattern.<br><br>grep fox sample.txt   ==&gt; will search \"fox\" at sample.txt<br><br><br>grep -i  somepattern somefile  ==&gt; -i will make the search case insensitive<br><br>you can use pipes and regular expressions:<br><br>ls /somedir | grep '.txt$</div>\n      ,<h1>Linux User Management</h1>       \n        <h3>UID and GID</h3>\n        <div>UID: the user id reference of the system to identify users<br>GID: the group id to identify groups of users<br><br>both are important to specify permissions</div>\n             \n        <h3>root or superuser</h3>\n        <div>root is the most powerful user on the system. Can access any file and terminate any process.<br>the \"sudo\" command allows to run a command as root.<br><br>With the command \"su\" -substitute user- you can run commands as other user -for example root- as long as you know the password.<br><br>In the file \"/etc/sudoers\" there is a list of the users that can run \"sudo\". You can edit this file with the \"visudo\" command.</div>\n             \n        <h3>/etc/passwd</h3>\n        <div>List the users and their UIDs</div>\n             \n        <h3>/etc/shadow</h3>\n        <div>Stores information about user authentification</div>\n             \n        <h3>/etc/group</h3>\n        <div>This file allows for different groups with different permissions.</div>\n             \n        <h3>user management commands</h3>\n        <div>sudo useradd bob ==&gt; adds a new user<br><br>sudo userdel bob ==&gt; deletes an user<br><br>passwd bob ==&gt; change password of user</div>\n      ,<h1>CSS exciting stuff</h1>       \n        <h3>take a look to</h3>\n        <div>@keyframe<br>CSS grid<br>new stuff in general<br>css variables</div>\n             \n        <h3>All about selectors</h3>\n        <div><a href=\"https://www.filmaffinity.com/uk/search.php?stype=director&amp;sn&amp;stext=Jos%C3%A9%20Antonio%20de%20la%20Loma\">https://www.w3.org/TR/selectors-3/#selectors</a></div>\n      ,<h1>Linux file permissions</h1>       \n        <h3>file permissions explained</h3>\n        <div>example:<strong> drwxr-xr-x<br><br></strong>we can divide it like this:<br><br>d | rwx | r-x | r-x<br><br>the first letter is the type of file. this is typically \"d\" for directory or \"a\" for file<br><br>then the first group of three is user permissions<br><br>then the second group of three is group permissions<br><br>and the last group of three is everyone else's permissions<br><br>And they mean this:<br><br>r: readable<br>w: writable<br>x: executable<br>-: empty </div>\n             \n        <h3>chmod -modifying permissions-</h3>\n        <div>chmod u+x myfile  =&gt; adding executable permissions to user for myfile<br>chmod u-x myfile =&gt; removing executable permissions to user for myfile<br>chmod ug+w myfile =&gt; adding writable permissions for user and group for myfile<br><br>there is another way of using chmod, using numbers:<br><br>4: read permissions<br>2: write permissions<br>1: execute permissions</div>\n             \n        <h3>chown and chgrp -modifying user and group ownership-</h3>\n        <div>sudo chown patty myfile  ==&gt; will set the ownership of myfile to patty<br><br>sudo chgrp whales myfile ==&gt; will set the group of myfile to whales<br><br>And doing the two at once:<br><br>sudo chown patty:whales myfile</div>\n             \n        <h3>the sticky bit</h3>\n        <div>If you add the sticky bit to a file you make that only root can delete that file:<br><br>sudo chmod +t mydir ==&gt; only root can delete mydir now</div>\n      ,<h1>Ruby metaprogramming II</h1>       \n        <h3>class_eval and class_exec</h3>\n        <div>Both evaluate a block in the context of a class. Just like instance_eval and instance_exec but with a class instead of an instance. class_exec can pass params whereas class_eval can't.<br><br></div><ol><li><pre><strong>def </strong>add_method_to(a_class)\r\n a_class.class_eval <strong>do </strong></pre></li><li><pre>  <strong>def </strong>m; <em>'Hello!'</em>;\r\n  <strong>end\r\n end </strong></pre></li><li><pre><strong>end \r\n</strong><br></pre></li><li><pre>add_method_to String\r\n\"<em>abc\"</em>.m <em># =&gt; \"Hello!\" </em></pre></li></ol><div><br>class_eval reopens the class and you can add or modify stuff within the class.<br>One difference between class and class_eval is that class opens a new scope -it's a scope gate- whereas class_eval has a flat scope.<br><br>Just as there is a class_eval and class_exec for classes, there is module_eval and module_exec for modules.</div>\n             \n        <h3>class instance variables vs class variables</h3>\n        <div>class instance variables is this:<br><br></div><pre>class MyClass\r\n  @var = 1\r\nend</pre><div><br>class variables are this:<br><br></div><pre>class MyClass\r\n  @@var = 1\r\nend</pre><div><br>do not confuse any of this with instance variables:<br><br></div><pre>class MyClass\r\n  def my_method\r\n    @var = 1\r\n  end\r\nend</pre><div><br><br>the difference is that class instance variables can't be accessed within instance methods and can't be accessed by subclasses of the class. Only in class methods.<br>class variables can be accessed in all those 3 places.</div>\n             \n        <h3>create a class without the keyword \"class\"</h3>\n        <div>Class.new accepts and argument that is the superclass of the new class and a block to define what is inside the class:<br><br></div><pre>c = Class.new(Array) do \r\n  def my_method\r\n    'hello'\r\n  end\r\nend</pre>\n             \n        <h3>Singleton methods</h3>\n        <div>It's actually quite a complicated subject.<br>The basics is that you can add a method to a instance of a class on the fly:<br><br></div><pre>paragraph = 'this is my string'\r\ndef paragraph.title\r\n  self.upcase == self\r\nend</pre><div><br>** other way to define a singleton method is \"Object#define_singleton_method\"</div><div><br>But it's actually more complicated than that, as you will see in following cards :)<br><br>When you ask an object for its class, Ruby doesn’t always tell you the whole truth. Instead of the class that you see, an object can have its own special, hidden class. That’s called the <em>singleton class </em>of the object. (You can also hear it called the <em>metaclass </em>or the <em>eigenclass</em>. However, “singleton class” is the official name.) <br><br>The way to find the singleton class is with the method \"Object#singleton_class\"<br><br>paragraph.singleton_class<br><br>Singleton classes can only have 1 instance -hence the name-. Plus it is where singleton methods live.<br><br>.class =&gt; gives you the class that the object is an instance of<br>.superclass =&gt; gives you the class that the class inherits from<br><br>So take a look to this diagram and I'll try to explain it as well as I can:<br><action-text-attachment sgid=\"BAh7CEkiCGdpZAY6BkVUSSIyZ2lkOi8va2lyaWEvQWN0aXZlU3RvcmFnZTo6QmxvYi8xOT9leHBpcmVzX2luBjsAVEkiDHB1cnBvc2UGOwBUSSIPYXR0YWNoYWJsZQY7AFRJIg9leHBpcmVzX2F0BjsAVDA=--23e417454b23855edf15bc25ce4255bfef172c80\" content-type=\"image/png\" url=\"https://flamyduck.com/rails/active_storage/blobs/redirect/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBHQT09IiwiZXhwIjpudWxsLCJwdXIiOiJibG9iX2lkIn19--4998a0479986a4fa8d41af8789301b0336125276/Screenshot%202021-04-20%20at%2007.55.48.png\" filename=\"Screenshot 2021-04-20 at 07.55.48.png\" filesize=\"3204041\" width=\"1434\" height=\"1346\" previewable=\"true\" presentation=\"gallery\"></action-text-attachment><br><br><br>A singleton class of an object -an instance of a class- is a class only for that object. The superclass of that singleton class is the class of the instantiated object. Singleton methods of obj live in its singleton class.<br><br>BUT classes are objects too, so they can have their own singleton class, right? The singleton methods of a class are its class methods, and -obviously- live in its singleton class.<br>The singleton class of a class inherits from the singleton class of the superclass of the \"parent\" class -or \"Object\" is there is none, as Object is the superclass or the last parent class-. This is the reason why classes inherit classes methods from its superclass.<br><br>Because all this, now we know 3 different ways to create class methods:<br><br></div><pre><strong>def </strong>MyClass.a_class_method; <strong>end \r\n</strong>\r\n<strong>class </strong>MyClass\r\n  <strong>def </strong>self.another_class_method; <strong>end </strong>\r\n<strong>end \r\n</strong>\r\n<strong>class </strong>MyClass <strong>class </strong>&lt;&lt; self \r\n  <strong>def </strong>yet_another_class_method; <strong>end end </strong>\r\n<strong>end </strong></pre>\n             \n        <h3>duck typing </h3>\n        <div>In typed -or static- languages you say that an object has type T because it belongs to class T. In Ruby, as it's an non-typed -or dynamic- language, we don't care what class the object belongs to, but rather what the object responds to -if the object responds to this or that method-. So if it walks like a duck and quacks like a duck, must be a duck. </div>\n             \n        <h3>Class Macros</h3>\n        <div>Class Macros are just class methods that are meant to use in a class definition<br><br>Ruby objects don't have attributes. If you want something that looks like an attribute, you have to define two Mimic Methods, a reader and a writer:<br><br></div><pre>class MyClass\r\n  def my_attribute=(value)\r\n    @my_attribute = value\r\n  end\r\n  def my_attribute\r\n    @my_attribute\r\n  end\r\nend</pre><div><br>to avoid having to repeat this so many times we have the \"attr_*\" , attr_reader, attr_writer and attr_accessor</div>\n             \n        <h3>talking about modules and classes. Object#include and Object#extend</h3>\n        <div>When you include a module in a class, only the \"instance methods\" -not the \"class methods\"- will be included in the class. So a way to do it is this one -this technique is called \"Class extension\"-:<br><br>Object#include<br><br></div><pre>module MyModule\r\n  def self.module_method\r\n    'whatever'\r\n  end\r\nend\r\n<br>class MyClass\r\n  class &lt;&lt; self\r\n    include MyModule\r\n  end\r\nend</pre><div><br>you can do exactly the same with instances of classes. This other technique is called \"Object extension\":<br><br></div><pre><strong>module </strong>MyModule\r\n  <strong>def </strong>my_method\r\n   <em>'hello'\r\n </em> <strong>end </strong>\r\n<strong>end \r\n \r\n\r\n</strong>obj = MyClass.new\r\n \r\nclass &lt;&lt; obj\r\n  include MyModule\r\nend\r\n \r\nobj.my_method #hello\r\nobj.singleton_methods # [:my_method] </pre><div><br>this pattern is important enough to have its own method: Object#extend<br><br></div><pre><strong>module </strong>MyModule\r\n  <strong>def </strong>my_method; <em>'hello'</em>; <strong>end </strong>\r\n<strong>end \r\n</strong>\r\nobj = Object.new\r\nobj.extend MyModule\r\nobj.my_method # 'hello'\r\n\r\n<strong>class </strong>MyClass\r\n extend MyModule \r\n<strong>end \r\n</strong>\r\nMyClass.my_method <em>#\"hello\" </em></pre>\n             \n        <h3>Module#alias_method -or the keyword alias, which is the same-</h3>\n        <div>Changes the name of a method.  The first parameter is the new name and the second the old name.<br><br>There is an interesting case:<br><br></div><pre><strong>class </strong>String\r\n alias_method :real_length, :length \r\n <strong>def </strong>length\r\n  real_length &gt; 5 ? <em>'long' </em>: <em>'short' </em>\r\n <strong>end\r\nend \r\n </strong>\r\n<em>\"War and Peace\"</em>.length <em># =&gt; \"long\"\r\n\"War and Peace\"</em>.real_length <em># =&gt; 13 </em></pre><div><br>The previous code redefines String#length, but the alias still refers to the original method. This gives you insight into how method redefinition works. When you redefine a method, you don’t really change the method. Instead, you define a new method and attach an existing name to that new method. You can still call the old version of the method as long as you have another name that’s still attached to it. <br><br>This leads to an interesting pattern:<br><br></div><ol><li>You alias a method. </li><li>You redefine it. </li><li>You call the old method from the new method. </li></ol>\n      ,<h1>Linux processes</h1>       \n        <h3>ps -lists processes-</h3>\n        <div>processes are the programs that are running on your machine. They are managed by the kernel and each one has a process ID.<br><br><br></div><pre>$ ps\r\n\r\n\r\n\r\nPID        TTY     STAT   TIME          CMD\r\n\r\n41230    pts/4    Ss        00:00:00     bash\r\n\r\n51224    pts/4    R+        00:00:00     ps</pre><div><br></div><ul><li>PID: Process ID</li><li>TTY: Controlling terminal associated with the process (we'll go in detail about this later)</li><li>STAT: Process status code</li><li>TIME: Total CPU usage time</li><li>CMD: Name of executable/command</li></ul>\n             \n        <h3>ps aux</h3>\n        <div>a: displays all processes running<br>u: shows more detail <br>x: show all processes that don't have a TTY associated<br><br>it shows way more fields. This fields are:<br><br></div><ul><li>USER: The effective user (the one whose access we are using)</li><li>PID: Process ID</li><li>%CPU: CPU time used divided by the time the process has been running</li><li>%MEM: Ratio of the process's resident set size to the physical memory on the machine</li><li>VSZ: Virtual memory usage of the entire process</li><li>RSS: Resident set size, the non-swapped physical memory that a task has used</li><li>TTY: Controlling terminal associated with the process</li><li>STAT: Process status code</li><li>START: Start time of the process</li><li>TIME: Total CPU usage time</li><li>COMMAND: Name of executable/command</li></ul><div><br><br>Different values for \"STAT\":<br><br></div><ul><li>R: running or runnable, it is just waiting for the CPU to process it</li><li>S: Interruptible sleep, waiting for an event to complete, such as input from the terminal</li><li>D: Uninterruptible sleep, processes that cannot be killed or interrupted with a signal, usually to make them go away you have to reboot or fix the issue</li><li>Z: Zombie, we discussed in a previous lesson that zombies are terminated processes that are waiting to have their statuses collected</li><li>T: Stopped, a process that has been suspended/stopped</li></ul>\n             \n        <h3>top</h3>\n        <div>Gives you a list of the processes ordered by consumption of resources. Updates over time.</div>\n             \n        <h3>TTY</h3>\n        <div>TTY is the terminal that executed the command. It can be a pseudoterminal -they emulate terminal with the shell terminal window, the ones that we use- or terminals -pure terminal we don't really use-</div>\n             \n        <h3>Daemon processes</h3>\n        <div>Run in the background continuously. Typically start when the computer starts and basically keep the system working.</div>\n             \n        <h3>Processes and kernel</h3>\n        <div>The Kernel is in charge of the processes. It allocates the memory, CPU, I/O and all the rest for each of the processes.</div>\n             \n        <h3>kill a process</h3>\n        <div>kill PID<br><br>you can specify the signal as well: kill -9 1245</div>\n             \n        <h3>niceness</h3>\n        <div>When you are running several processes in your computer it seems that they are running at the same time, but it's actually not like that. They use the CPU one after the other, taking a fraction each.<br><br>If they would behave normally they would take a similar amount of time of the CPU. However there is a way to influence the kernel to get more -or less- priority to get CPU time. That parameter is call \"nice\". A high number means that the process is nice and will take less preference. A low number is not nice.<br><br>This nice number can be set.</div>\n      ,<h1>Typescript - Basics</h1>       \n        <h3>difference between interface and type</h3>\n        <div>Explained <a href=\"https://stackoverflow.com/a/65948871/6834250\">here</a>.</div>\n             \n        <h3>compiler</h3>\n        <div>it's called \"tsc\" and it compiles the ts code into pure js code.</div>\n             \n        <h3>Everyday Types</h3>\n        <ul><li>Primitives: </li></ul><div>-string<br>-number<br>-boolean<br>-null and undefined &lt;-- different if \"strictNullChecks\" is on.<br><br>- void &lt;-- meaning the return can't be used anywhere else, must be disregarded.</div><div><br></div><ul><li>Arrays:</li></ul><div>- string[] or Array&lt;string&gt; when it's an array with 0 or more string<br>-[string] when it's an array with 1 string in it<br><br></div><ul><li>Any: any type</li></ul><div><br></div><ul><li>Functions:</li></ul><div>- const happyBirthdayGreeting = (({ name }, age): ({ name: string }, number)): string =&gt; {...<br><br></div><ul><li>Objects: for js values with properties </li></ul><div>- const object: { name: string, age: number } = { name: 'sergio', age: 40 };<br>- you can declare conditional values: { name: string, age?: number } &lt;-- when doing this you'll have to check for undefined before using it with: if ( object.age !== undefined) or object?.age<br><br></div><ul><li>Union types:</li></ul><div>- string | number =&gt; it's one or the other. it is RESTRICTIVE, meaning that you can't use methods that are only allowed in one of those two types. In order to make that work you'll have to use something like: if (Array.isArray(x)) or if (typeof name === 'string'), you know...<br><br></div><ul><li>Type Aliases: it's just an alias, just to make it more readable and to share that type somewhere else</li></ul><div>- type Whatever = number | string<br><br></div><ul><li>Interfaces: It's another way to name an object type:</li></ul><div>- interface Point {<br>     x: number,<br>     y: number<br>   }<br><br></div><ul><li>Type assertions: It is useful when you want to narrow down the type.</li></ul><div>eg: const myCanvas = document.getElementById(\"main_canvas\") as HTMLCanvasElement;<br>ts only knows that it's a HTMLElement, but if we KNOW that it is going to ba canvas, we can do that.<br><br>*Something useful with assertions might be this:  const a = (expr as any) as T; when you want to set the type of something.<br><br></div><ul><li>Literal types: For whenever you want to be specific about the value:</li></ul><div>- const name: 'sergio' = 'pepe'. // error &lt;-- it works for numbers, booleans, objects...<br>- you can mix literal types with other kind of types: eg: const mySomething = 'sergio' | number | myAlias<br><br>** Literal Inference: When you initialize a variable with an object, typescript assumes that the value of that property might change of value later. So you might need to do something like this:<br>const req = { url: \"https://example.com\", method: \"GET\" as \"GET\" };<br>or<br>const req = { url: \"https://example.com\", method: \"GET\" } as const;<br><br></div>\n             \n        <h3>void vs undefined</h3>\n        <div>Kind of the same, but \"void\" must be disregarded:<br><br></div><div>this is cool:<br><br></div><pre>const test = function(): undefined {\r\n  return;\r\n}\r\nconst othertest = function() {\r\n  if (!!test()) {\r\n    return 'is empty';\r\n  } \r\n  return 'is not empty';\r\n}</pre><div><br>this is not:<br><br></div><pre>const test = function(): void {\r\n  return;\r\n}\r\nconst othertest = function() {\r\n  if (!!test()) {\r\n    return 'is empty';\r\n  } \r\n  return 'is not empty';\r\n}</pre>\n             \n        <h3>any vs unkown</h3>\n        <div>\"any\" is just for anything. With unknown we have to narrow it down to use it somewhere else:<br><br>this from stackoverflow:<br><br></div><pre>let vAny: any = 10;          // We can assign anything to any\r\nlet vUnknown: unknown =  10; // We can assign anything to unknown just like any \r\n\r\n\r\nlet s1: string = vAny;     // Any is assignable to anything \r\nlet s2: string = vUnknown; // Invalid we can't assign vUnknown to any other\r\n// type (without an explicit assertion)\r\n\r\nvAny.method();     // ok anything goes with any\r\nvUnknown.method(); // not ok, we don't know anything about this variable</pre><div><br>and example, fixed:<br><br></div><pre>let vUnknown: unknown =  10;\r\nlet s2: string = vUnknown as string;</pre>\n      ,<h1>ARIA</h1>       \n        <h3>Meaning</h3>\n        <div>Accessible Rich Internet Applications <strong>(ARIA) </strong>is a set of attributes that define ways to make web content and web applications (especially those developed with JavaScript) more accessible to people with disabilities.</div>\n      ,<h1>Project Rails Side</h1>       \n        <h3>Questions</h3>\n        <div>- What is Rails fragment caching</div>\n             \n        <h3>create backend</h3>\n        <div>-Starting dockerized backend. Follow instructions <a href=\"https://medium.com/@nirmalyaghosh/9-steps-for-dockerizing-a-rails-api-only-application-d65a8836f3df\">here</a>: </div>\n      ,<h1>Typescript - Narrowing</h1>       \n        <h3>Introduction</h3>\n        <div>TS is not going to let you call a method if that method is not available for ALL the types that can be.<br>In order to work with this, you must use \"if\"s <br><br>example:<br><br></div><pre>function padLeft(padding: number | string, input: string) {\r\n  if (typeof padding === \"number\") {\r\n    return new Array(padding + 1).join(\" \") + input;\r\n  }\r\n  return padding + input;</pre>\n             \n        <h3>typeof type guards</h3>\n        <ul><li>\"string\"</li><li>\"number\"</li><li>\"bigint\"</li><li>\"boolean\"</li><li>\"symbol\"</li><li>\"undefined\"</li><li>\"object\" &lt;== include arrays and null, and obviously objects</li><li>\"function\"</li></ul>\n             \n        <h3>The \"in\" operator narrowing</h3>\n        <div>When you want to narrow by properties present in the object:<br><br></div><pre>type Test1 = {\r\n    name: (name: string) =&gt; string\r\n}\r\n\r\ntype Test2 = {\r\n    age: (age: number) =&gt; string\r\n}\r\n\r\ntype Test = Test1 | Test2;\r\n\r\nfunction test(eo: Test): string {\r\n  if ('name' in eo) return eo.name('sergio')\r\n  return 'pepe'\r\n}\r\n\r\ntest({ name: (name) =&gt; { return name }})</pre>\n             \n        <h3>The \"instance of\" operator narrowing</h3>\n        <div>as it sounds. pretty useful for classes.<br><br></div><pre>class Car {\r\n\r\n    make: string;\r\n    \r\n    constructor(make: string) {\r\n        this.make = make;\r\n    }\r\n}\r\nconst auto = new Car('Honda');\r\n\r\nfunction test(eo: Car | string): string {\r\n  if (eo instanceof Car) return eo.make;\r\n  return 'pepe'\r\n}\r\n\r\ntest(auto)</pre>\n             \n        <h3>Discriminated unions</h3>\n        <div>When you have something like this:<br><br></div><pre>interface Shape {\r\n  kind: \"circle\" | \"square\";\r\n  radius?: number;\r\n  sideLength?: number;\r\n}\r\n\r\nfunction getArea(shape: Shape) {\r\n  if (shape.kind === \"circle\") {\r\n    return Math.PI * shape.radius ** 2;\r\n  }\r\n}</pre><div><br>TS can't know that only when kind === 'circle' the 'radius' property is present.<br>So you have to do something like this:<br><br></div><pre>interface Circle {\r\n  kind: \"circle\";\r\n  radius: number;\r\n}\r\n\r\ninterface Square {\r\n  kind: \"square\";\r\n  sideLength: number;\r\n}\r\n\r\ntype Shape = Circle | Square;\r\n\r\nfunction getAreaS(shape: Shape) {\r\n  if (shape.kind === \"circle\") {\r\n    return Math.PI * shape.radius! ** 2;\r\n  } else {\r\n      return null\r\n  }\r\n}</pre><div><br>Con un \"switch\" funcionaria tb.</div>\n      ,<h1>Typescript - Functions</h1>       \n        <h3>Call Signatures</h3>\n        <div>When the function, besides, have properties:<br><br></div><pre>type DescribableFunction = {\r\n  description: string;\r\n  (someArg: number): boolean;\r\n};\r\nfunction doSomething(fn: DescribableFunction) {\r\n  console.log(fn.description + \" returned \" + fn(6));\r\n}</pre>\n             \n        <h3>Constructor Signatures</h3>\n        <div>When the function is going to be instantiated:<br><br></div><pre>type SomeConstructor = {\r\n  new (s: string): SomeObject;\r\n};\r\nfunction fn(ctor: SomeConstructor) {\r\n  return new ctor(\"hello\");\r\n}</pre><div><br>if the function can be called with and without \"new\" -like Date, for example-:<br><br></div><pre>interface CallOrConstruct {\r\n  new (s: string): Date;\r\n  (n?: number): number;\r\n}</pre>\n             \n        <h3>Generic Functions</h3>\n        <div>When the type that goes in can change:<br><br></div><pre>function firstElement&lt;Type&gt;(arr: Type[]): Type {\r\n  return arr[0];\r\n}</pre><div><br>It creates a link between the different places where it is used in the function.<br><br>** note that we haven't created the type Type, it's inferred (deducido)</div>\n             \n        <h3>Function Overloads</h3>\n        <div>When you want to create functions that can accept a variable number of arguments. PLEASE DON'T USE THIS CRAP. If you have to, go to the docs. They look something like this:<br><br></div><pre>function makeDate(timestamp: number): Date;\r\nfunction makeDate(m: number, d: number, y: number): Date;\r\nfunction makeDate(mOrTimestamp: number, d?: number, y?: number): Date {\r\n  if (d !== undefined &amp;&amp; y !== undefined) {\r\n    return new Date(y, mOrTimestamp, d);\r\n  } else {\r\n    return new Date(mOrTimestamp);\r\n  }\r\n}</pre>\n             \n        <h3>Rest arguments (with the spread operator)</h3>\n        <div>Just use Array&lt;type&gt; or type[], should be fine.<br><br>** TS doesn't suppose that arrays are immutable, so you might have problems with cases like:<br><br></div><pre>const args = [8, 5];\r\nconst angle = Math.atan2(...args); //Expected 2 arguments, but got 0 or more.</pre><div><br>So you have to do something like:<br><br></div><pre>// Inferred as 2-length tuple\r\nconst args = [8, 5] as const;\r\n// OK\r\nconst angle = Math.atan2(...args);</pre>\n      ,<h1>Typescript - Objects</h1>       \n        <h3>You can use either \"interface\" or an alias with \"type\"</h3>\n        <pre>interface Person {\r\n  name: string;\r\n  age: number;\r\n}</pre><div><br></div><pre>type Person = {\r\n  name: string;\r\n  age: number;\r\n};</pre>\n             \n        <h3>Optional properties</h3>\n        <div>Like this:<br><br></div><pre>interface PaintOptions {\r\n  shape: Shape;\r\n  xPos?: number;\r\n  yPos?: number;\r\n}</pre>\n             \n        <h3>readonly</h3>\n        <div>Those properties can't be rewritten:<br><br></div><pre>interface Home {\r\n  readonly resident: { name: string; age: number };\r\n}</pre>\n             \n        <h3>Index signatures</h3>\n        <div>For whenever you don't know what the property is going to be. You can use it with types and interfaces. Obviously the key can only be a string or a number.<br><br></div><pre>type Killo = {\r\n  name: string,\r\n  age: number\r\n}\r\n\r\ntype Test = {\r\n  [index: string]: Killo\r\n}\r\n\r\nconst test: Test = {};\r\n\r\ntest.paisha = { name: 'sergio', age: 55 };</pre><div><br>And you can do indexes \"readOnly\":<br><br></div><pre>interface ReadonlyStringArray {\r\n  readonly [index: number]: string;\r\n}</pre>\n             \n        <h3>Extending types</h3>\n        <div>Basically to extend with another -or several- type/s<br><br>It has to be interfaces -\"type\" aliases don't extend-<br><br>Extending one:<br><br></div><pre>interface BasicAddress {\r\n  name?: string;\r\n  street: string;\r\n  city: string;\r\n  country: string;\r\n  postalCode: string;\r\n}\r\n\r\n\r\ninterface AddressWithUnit extends BasicAddress {\r\n  unit: string;\r\n}</pre><div><br>or extending several:<br><br></div><pre>interface ColorfulCircle extends Colorful, Circle {}</pre>\n             \n        <h3>Intersection types</h3>\n        <div>Kind of the same that we did extending interfaces but using types aliases instead:<br><br></div><pre>interface Colorful {\r\n  color: string;\r\n}\r\n\r\ninterface Circle {\r\n  radius: number;\r\n}\r\n\r\n\r\ntype ColorfulCircle = Colorful &amp; Circle;</pre>\n             \n        <h3>Generic object types</h3>\n        <div>When we want to be able to set the type on the fly. For example:<br><br></div><pre>interface Box&lt;Type&gt; {\r\n  contents: Type;\r\n}\r\n\r\n\r\nlet boxA: Box&lt;string&gt; = { contents: \"hello\" };\r\nlet boxB: Box&lt;number&gt; = { contents: 5 };</pre><div><br>you can use generics types with aliases as well:<br><br></div><pre>type Box&lt;Type&gt; = {\r\n  contents: Type\r\n}</pre><div><br>And with generic types you can do all types of weird stuff:<br><br></div><pre>type OrNull&lt;Type&gt; = Type | null;\r\ntype OneOrMany&lt;Type&gt; = Type | Type[];\r\n \r\ntype OneOrManyOrNull&lt;Type&gt; = OrNull&lt;OneOrMany&lt;Type&gt;&gt;; \r\ntype OneOrManyOrNullStrings = OneOrManyOrNull&lt;string&gt;;</pre>\n             \n        <h3>Arrays - yep, we are seen the arrays within the objects, just because the documentation does</h3>\n        <div>There is two types of array types: the normal array ones and the tuple types:<br>normal: Array&lt;Type&gt; or Type[]<br>tuple: [number, number, string, Type]<br><br>you can make that an array won't be able to be modified with \"ReadOnlyArray&lt;Type&gt;\"<br>for example: <br><br></div><pre>const nameAndSurname: ReadOnlyArray&lt;string&gt; = ['Sergio', 'Ibanez'];</pre><div><br>You can have \"readonly\" tuples as well in this way:<br><br></div><pre>const pair: readonly [string, number] = ['Loco', 8];</pre><div><br>You can use \"spreads\" with tuples basically in the way that you would expect (Obviously order matters)<br><br></div><pre>type StringNumberBooleans = [string, number, ...boolean[]]; // one string, then one number and then\r\n// any number of booleans\r\ntype StringBooleansNumber = [string, ...boolean[], number]; // you can imagine\r\n<br></pre>\n      ,<h1>Typescript - Classes</h1>       \n        <h3>Basics about classes</h3>\n        <pre>class Point {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nconst pt = new Point();\r\npt.x = 0;\r\npt.y = 0;\r\n \r\n// or we can initialize it like this\r\n \r\nclass Point {\r\n  x: number = 0;\r\n  y: number = 0;\r\n}\r\n \r\n// or like this\r\n \r\nclass Point {\r\n  x: number;\r\n  \r\n  constructor(value: number) {\r\n  this.x = value;\r\n  }\r\n}\r\n \r\n// readonly apply as well\r\n \r\nclass Point {\r\n  readonly x: number = 0;\r\n  y: number = 0;\r\n}\r\n<br></pre>\n             \n        <h3>methods</h3>\n        <div>basically what you'd expect:<br><br></div><pre>class Whatever {\r\n  myMethod(value: string): number {\r\n    if (value === 'sergio') return 10;\r\n    else return 0;\r\n  }\r\n}</pre>\n             \n        <h3>getters and setters</h3>\n        <div>what you'd expect:<br><br></div><pre>class C {\r\n  _length = 0;\r\n  get length() {\r\n    return this._length;\r\n  }\r\n  set length(value) {\r\n    this._length = value;\r\n  }\r\n}</pre><div><br>but there is some rules:<br><br></div><ul><li>If no set exists, the property is automatically readonly</li><li>The type of the setter parameter is inferred from the return type of the getter</li><li>If the setter parameter has a type annotation, it must match the return type of the getter</li><li>Getters and setters must have the same Member Visibility</li></ul>\n             \n        <h3>Methods visibility</h3>\n        <div>*Properties behave basically just like methods<br><br></div><ul><li>public: the default one. Accesible from everywhere. Nothing to see here</li></ul><div><br></div><ul><li>protected: only visible to subclasses of the class that the method is declared in.</li></ul><div><br></div><pre>class Parent {\r\n  protected myMethod() {\r\n    return 'sergio'\r\n  }\r\n}\r\n\r\nclass Child extends Parent {\r\n  paisha() {\r\n    return this.myMethod() // valid\r\n  }\r\n}\r\n\r\nconst killo = new Child()\r\nkillo.myMethod();  // this will throw an error\r\nkillo.paisha(); // this is fine</pre><div><br></div><ul><li>private: only visible and accesible for the class itsef, not by subclasses:</li></ul><div><br></div><pre>class Parent {\r\n  protected myMethod() {\r\n    return 'sergio'\r\n  }\r\n}\r\n\r\nclass Child extends Parent {\r\n  paisha() {\r\n    return this.myMethod() // this will throw an error\r\n  }\r\n}\r\n\r\nconst killo = new Child()\r\nkillo.myMethod();  // this will throw an error\r\nkillo.paisha(); // this will never happen :(</pre>\n             \n        <h3>Index signatures</h3>\n        <div>Just like in objects, but cooler as we can use \"this\"<br><br></div><pre>class MyClass {\r\n  [s: string]: boolean | ((s: string) =&gt; boolean);\r\n\r\n\r\n  check(s: string) {\r\n    return this[s] as boolean;\r\n  }\r\n}</pre>\n             \n        <h3>Implements</h3>\n        <ul><li>\"implements\": to check that a class satisfies a particular interface</li></ul><div>* The class needs to have everything in the interfaces that implements, but can have extra stuff<br><br></div><pre>interface Id {\r\n  myName: () =&gt; string,\r\n  myAge: () =&gt; number\r\n}\r\n\r\ninterface Flesh {\r\n  height: number,\r\n}\r\n\r\nclass Human {\r\n  public name: string = 'sergio';\r\n}\r\n\r\nclass Sergio extends Human implements Id, Flesh {\r\n\r\n  height: number = 187;\r\n\r\n  myName() {\r\n    return this.name;\r\n  }\r\n\r\n  myAge() {\r\n    return 40;\r\n  }\r\n\r\n  extraMethod() {\r\n    return 'whassssssup'\r\n  }\r\n}\r\n\r\nconst killo = new Sergio()\r\nkillo.myName();</pre><div><br>Implements may have conditionals as well:<br><br></div><pre>interface A {\r\n  x: number;\r\n  y?: number;\r\n}\r\nclass C implements A {\r\n  x = 0;\r\n  y = 2;\r\n}\r\nconst c = new C();\r\nc.y = 10;</pre>\n             \n        <h3>Generic classes</h3>\n        <div>A class constructor can accept aliases as type the params. There is other way, using generic classes, which I don't see the sense of it. This two would work, but I'd rather use the first one.<br><br></div><pre>type Type = string;\r\n\r\nclass Box {\r\n  contents: Type;\r\n  constructor(value: Type) {\r\n    this.contents = value;\r\n  }\r\n}\r\n\r\nconst b = new Box(\"hello!\");</pre><div><br>with generic classes:<br><br></div><pre>class Box&lt;Type&gt; {\r\n  contents: Type;\r\n  constructor(value: Type) {\r\n    this.contents = value;\r\n  }\r\n}\r\n\r\nconst b = new Box(\"hello!\");</pre>\n             \n        <h3>\"this\" type</h3>\n        <div>In classes, a special type called this refers <em>dynamically</em> to the type of the current class.<br><br></div><pre>interface HaveName {\r\n  name: string,\r\n}\r\nclass Parent {\r\n  _name: string = 'killo';\r\n\r\n  get name() {\r\n    return this._name;\r\n  }\r\n\r\n  doSomething() {\r\n    return this;\r\n  }\r\n}\r\n\r\nclass Child extends Parent implements HaveName {\r\n  age: number = 50;\r\n}\r\n\r\nclass Dog implements HaveName {\r\n  name: string; \r\n  good: boolean;\r\n\r\n  constructor(name: string, good: boolean) {\r\n    this.name = name;\r\n    this.good = good;\r\n  }\r\n}\r\n\r\nconst bob: Child = new Child();\r\nconst john: Dog = new Dog('john', true);\r\nconst test: Child = bob.doSomething(); // Parent would work as well. Dog would error</pre>\n             \n        <h3>\"this is Type\"</h3>\n        <div>You can use this is Type in the return position for methods in classes and interfaces. Its basically to check if the instance is \"instanceof\" a certain class. And then you can narrow down like this:<br><br></div><pre>class Parent {\r\n  isFirst(): this is FirstChild {\r\n    return this instanceof FirstChild;\r\n  }\r\n\r\n  isSecond(): this is SecondChild {\r\n    return this instanceof SecondChild;\r\n  }\r\n\r\n}\r\n\r\nclass FirstChild extends Parent {\r\n  age: number = 50;\r\n}\r\n\r\nclass SecondChild extends Parent {\r\n  address: string = 'wahtever';\r\n}\r\n\r\nconst killo: Parent = new SecondChild();\r\n\r\nif (killo.isSecond()) {\r\n  console.log(killo.address)\r\n}</pre>\n             \n        <h3>Abstract classes</h3>\n        <div>An abstract class is a class that can't be instantiated but can be extended from.<br>Used to force inherited classes to implement the methods of the abstract class.<br><br>You can use them like this:<br><br></div><pre>abstract class AbstractParent {\r\n  abstract name: string;\r\n\r\n  myName() {\r\n    return 'my name is: ' + this.name; \r\n  }\r\n}\r\n\r\nclass Child extends AbstractParent {\r\n  name: string = \"sergio\";\r\n}\r\n\r\nconst killo: Child = new Child();\r\nkillo.myName(); // 'my name is sergio'</pre><div><br><br>If you want to pass a parameter that is a class (!! NOT AN INSTANCE !!) that extends from an abstract class, you have to do it like this:<br><br></div><pre>abstract class AbstractParent {\r\n  abstract name: string;\r\n\r\n  myName() {\r\n    return 'my name is: ' + this.name; \r\n  }\r\n}\r\n\r\nclass Child extends AbstractParent {\r\n  name: string = \"sergio\";\r\n}\r\n\r\nconst test = function(theClass: new () =&gt; AbstractParent) {. // &lt;-- you could use \"typeof Child\"\r\n// but this is for all classes that inherit from that abstract class.\r\n  return new theClass().myName()\r\n}</pre>\n      ,<h1>Pros and const relational vs non-relational databases</h1>       \n        <h3>Relational database</h3>\n        <ul><li>Forms relations between tables that store data on specific entities</li><li>Uses SQL language</li></ul><div><br><strong>Pros<br></strong><br></div><ul><li>More simple</li><li>Data integrity -all entries are check on their validity-, this makes harder to make mistakes</li><li>Safer scalability, you can create new relationships without violating the data structure</li></ul><div><br>Cons<br><br></div><ul><li>Storage in concentrated, meaning that normally you have a server that stores a whole copy of the db.</li><li>If you want to add more computers, you have to put a single copy of the db in each computer. So one computer can't \"help\" another.</li></ul>\n             \n        <h3>Non relational database</h3>\n        <div>Depending of which we are using, the structure might be based in tables, json documents, graphs....<br>But they all relay in key-value store.<br><br>Pros:<br><br></div><ul><li>More flexible as the data is not constrain to tables</li><li>Handles unstructured data -this can be a pro or a con, as it makes easier to make mistakes-</li><li>Built to scale with high performance, but the cost is that the queries are less flexible -for example, there is no joins-</li><li>Storage will be distributed. So data can be stored along several computers.</li></ul><div><br>Cons<br><br></div><ul><li>It doesn't have the \"pros\" of the relational ones :D</li></ul>\n             \n        <h3>ORM</h3>\n        <div>stands for -you always forget- \"Object Relational mapping\"</div>\n             \n        <h3>When to use SQL</h3>\n        <ul><li>If you don't know exactly what the structure of your data is going to be in the future</li><li>When you want to perform flexible queries</li><li>When you want to do joins between different tables to create relations among them.</li><li>When you want to enforce field constrainsts</li></ul>\n             \n        <h3>When to use non-relational</h3>\n        <ul><li>If you know exactly how the structure of your data is going to be in the future.</li><li>When your primary key is known -if you don't know the primary key, you won't access it-. In relational db you don't necessary need it, you can just do a query with other parameters</li><li>When you need high performance and low latency -this is the most important one-</li></ul>\n      ,<h1>Private</h1>       \n        <h3>API -Application program interface-</h3>\n        <ul><li>Contract provided by one piece of software to another</li><li>Structured request and response</li></ul>\n             \n        <h3>stuff</h3>\n        <div>X - api restful<br>X - react cons, pros<br>X - express cons, pros<br>X - basic nodejs<br>X - cookies vs jwt<br>X - oauth<br>X - other css<br>X - json, jsonp<br>X -http structure -- look for forms and all that<br>X - ajax request vs fetch vs axios<br>X - cors<br>basic security attacks<br>X - GraphQL</div>\n             \n        <h3>REST -Representational state transfer- API</h3>\n        <div>* REST and RESTful is the same<br><br>Architecture style for designing network applications<br>Relies on a stateless, client-server protocol, almost always HTTP<br>It normally uses json for transfering data<br>Treats server objects as resources that can be created or destroyed<br>Can be used by basically any language -because most of the languages can do http request-</div>\n             \n        <h3>HTTP methods</h3>\n        <div>GET: Get data. <br>POST: Submit data (update). Is not idempotent (Making the same twice have different effect than doing it once). Actually is the only method that is not idempotent. That is why is normally used for creating.<br><br>* Only get and post can be done from a form<br><br>PUT: Update and specified resource (create). It is idempotent (Making it once has the same effect than doing it multiple times). That is why is normally used for updating.<br>DELETE: Delete a specified resource<br><br>* this last two can be done with something like HTML5 fetch<br><br>---- other ----<br><br>HEAD: Same as GET but does not return a body<br>OPTIONS: Returns the supported HTTP methods available<br>PATCH: Update partial resources</div>\n             \n        <h3>JSON -javascript object notation-</h3>\n        <div>Data format for data interchange on the web</div>\n             \n        <h3>JSONP</h3>\n        <div>Allow you get a file from a different domain, not like json. So CORS don't apply.<br>It only works with GET method.<br><br>It actually comes with the function, so it's actually a valid piece of javascript.</div>\n             \n        <h3>CSS grid</h3>\n        \n             \n        <h3>GRAPHQL</h3>\n        <div>Created by Facebook.<br>It is an specification, not an implementation, you don't install it. What you install is the implementation, and there is several of them.<br><br>It's a query language for your API<br>It's a different approach than a REST API<br><br>Basically allow you to get more accurate data from within objects. You don't have to get all the stuff about that object, just what you want.</div>\n             \n        <h3>CORS</h3>\n        <div><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\">https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS</a></div>\n      ,<h1>React Testing Library</h1>       \n        <h3>Queries</h3>\n        <div>Methods to find elements on the page. <br><br>Types of queries:<br><br>-- Single Elements:</div><ul><li> getBy: error in no matching element or more than one element.</li><li>queryBy: null if not error found, error if more than one found</li><li>findBy: returns a promise. promise rejected if no element is found after a -default- 1000ms. </li></ul><div><br>--Several Elements: Instead of the matched elements, return an array with the matched ones:</div><ul><li>getAllBy: throws an error if no elements matched</li><li>queryAllBy: returns an empty array if no elements match</li><li>findAllBy: returns a promise. promise is rejected after 1000ms -default value-</li></ul>\n             \n        <h3>Queries Priority</h3>\n        <div>First -- Accesibility</div><ul><li>-Role: get element by \"accesible name\"</li><li>-LabelText: good for form fields</li><li>-PlaceholderText: in case there is no label to access the form field</li><li>-Text: useful to find not intactive elements -divs, spans,...-</li><li>-DisplayedValue: for current value in the field form</li></ul><div><br>Then -- Semantic Queries</div><ul><li>-AltText: for elements that support alt (img, area and input)</li><li>-Title: The title attribut is not consistently read by screenreaders and is not visible by default for sighted users</li></ul><div><br>Last -- Test IDs</div><ul><li>-TestId: just what it sounds like</li></ul>\n             \n        <h3>Firing Events -most of the time you are going to be using @testing-library/user-event, tho-</h3>\n        <div>-- <strong>fireEvent --</strong><br><br></div><pre>fireEvent(node: HTMLElement, event: Event)</pre><div><br>example:<br><br></div><pre>fireEvent(\r\n  getByText(container, 'Submit'),\r\n  <em>new</em> MouseEvent('click', {\r\n    bubbles: true,\r\n    cancelable: true,\r\n  })\r\n)</pre><div><br><strong>-- fireEvent[eventName]<br></strong><br></div><pre>fireEvent[eventName](node: HTMLElement, eventProperties: Object)</pre><div><br>Let's explore the posible eventProperties:<br><br></div><ul><li>target: When an event is dispatched on an element, the event has the subjected element on a property called target. As a convenience, if you provide a target property in the eventProperties (second argument), then those properties will be assigned to the node which is receiving the event.</li></ul><div><br></div><pre>fireEvent.change(getByLabelText(/username/i), { target: { value: 'a' } })</pre><div><br></div><ul><li><strong>dataTransfer: </strong>Drag events have a dataTransfer property that contains data transferred during the operation. As a convenience, if you provide a dataTransfer property in the eventProperties (second argument), then those properties will be added to the event.</li></ul><div><br></div><pre>fireEvent.drop(getByLabelText(/drop files here/i), {\r\n  dataTransfer: {\r\n    files: [<em>new</em> File(['(⌐□_□)'], 'chucknorris.png', { type: 'image/png' })],\r\n  },\r\n})</pre><div><br></div><ul><li>k<strong>eyboard events</strong>: There are three event types related to keyboard input - keyPress, keyDown, and keyUp. When firing these you need to reference an element in the DOM and the key you want to fire.</li></ul><div><br></div><pre>fireEvent.keyDown(domNode, { key: 'A', code: 'KeyA' })</pre><div><br>* Using Jest Function Mocks<br><br></div><div>Jest's Mock functions can be used to test that a callback passed to the function was called,<br> or what it was called when the event that <strong>should</strong> trigger the callback function<br> does trigger the bound callback.<br><br>example: <br><br></div><pre><em>import</em> { render, screen, fireEvent } <em>from</em> '@testing-library/react'\r\n\r\n\r\n<em>const</em> Button = ({ onClick, children }) =&gt; (\r\n  &lt;button onClick={onClick}&gt;{children}&lt;/button&gt;\r\n)\r\n\r\n\r\ntest('calls onClick prop when clicked', () =&gt; {\r\n  <em>const</em> handleClick = jest.fn()\r\n  render(&lt;Button onClick={handleClick}&gt;Click Me&lt;/Button&gt;)\r\n  fireEvent.click(screen.getByText(/click me/i))\r\n  expect(handleClick).toHaveBeenCalledTimes(1)\r\n})</pre>\n             \n        <h3>user-event</h3>\n        <div>This is what you are mostly going to use to deal with events. You have to install it<br><br></div><pre>npm install --save-dev @testing-library/user-event</pre><div><br>Basically all the events that you can do. check docs in <a href=\"https://testing-library.com/docs/ecosystem-user-event\">here</a>.</div><div><br></div>\n      ,<h1>Express.js and Passport authentication</h1>       \n        <h3>diagram for regular authentication -not Oauth-</h3>\n        <div><br>here is the full code: <a href=\"https://dev.to/zachgoll/the-ultimate-guide-to-passport-js-k2l\">https://dev.to/zachgoll/the-ultimate-guide-to-passport-js-k2l</a><br><br>go <a href=\"https://www.planttext.com/\">here </a>and:<br><br></div><div>@startuml<br><br>participant User as \"User Browser\"<br>participant Server<br>participant Session as \"express-session middw\"<br>participant passauth as \"passport.authenticate() middw\"<br>participant passini as \"passport.initialize() middw\"<br>participant passsess as \"passport.session() middw\"<br>participant db<br>note over User #FFAAAA<br>user connects for the<br>first time to this domain<br>end note<br><br>/ note over passini, passsess #silver<br>both will look in every request for<br>req.session.passort, if it doesn't exists<br>it is ignored in the diagram<br>end note<br><br>User -&gt; Server: GET request to /login<br><br>Server -&gt; Session : ey, there is a connection to the server<br>note over Session<br>checks Cookie HTTP header<br>on the req obj, as it is the<br>first time, there is none<br>end note<br><br>Session -&gt; db : create session record on db<br>Session -&gt; Session : creates req.session,\\ncreates the cookie for the session\\nand puts it in req.session<br><br><br>Session -&gt; Server : here is the Cookie with the session but no user Id <br><br><br>Server -&gt; User : html for the login form\\nwith the Cookie in the header<br><br>note over User #FFAAAA<br>the user gets bored<br>and closes the laptop<br>end note<br><br>note over User #aqua<br>the user comes back<br>and connects to login<br>end note<br><br>User -&gt; Server : GET request to /login<br>Server -&gt; Session : hey! there is another connection to server<br><br>note over Session<br>checks Cookie HTTP header<br>on the req obj, and this time<br>it finds one -the one created<br>before-<br>end note<br><br>note over Session<br>checkd the connect.sid value from the cookie<br>end note<br><br>Session -&gt; db : does this session exists\\nin the db?<br>db -&gt; Session : yes<br>Session -&gt; Server : everything cool,\\nnothing to change here<br>Server -&gt; User : here is the form again\\nand the same cookie in\\n the header as before<br><br>User -&gt; Server : here is my username and password (POST to /login)<br><br>Server -&gt; passauth : this route uses the\\npassport.authenticate() middleware<br>passauth -&gt; db : are this username and password in the db? (we assume they are)<br>db -&gt; passauth : yes<br><br>note over passauth : cb returns user<br>note over passauth : it creates passport property in req.session<br>note over passauth : serializes the user via passport.serializeUser()<br>note over passauth : attach serialized user (for example the user id) to req.session.passport.user<br>note over passauth : attach the whole user to req.user<br><br>passauth -&gt; Server : we are all set<br>Server -&gt; User : HTML with message \"welcome back!\"<br><br>User -&gt; Server : GET to authenticate route<br><br>Server -&gt; Session : hey! another connection to server!<br>note over Session: check Cookie from req obj (connect.sid)<br>Session -&gt; db : does this session exists?<br>db -&gt; Session : yes<br>note over Session: cool, we don't change Cookie then<br><br>Session -&gt; passini : next (all request go through this two middlewares\\nbut don't do shit because there is\\nnot req.session.passport property\\n, but this time is different)<br><br>note over passini<br>checks req.session.password.user and see that there<br>is a serialized user there -probably user id-<br>end note<br><br>passini -&gt; passsess: next -and pass the serialized user-<br>passsess -&gt; db: give me the user for this userid<br>db -&gt; passsess: there it is<br>note over passsess: set the user to req.user again<br><br>passsess -&gt; Server: we are all set<br>Server -&gt; Server: the protected route checks that req.session.passport.user\\nexists -it does, as we just set it-\\nand works fine<br><br>Server -&gt; User: here is your HTML and we are cool<br><br>@enduml</div>\n      ,<h1>Thinks I'm learning in Cyfred</h1>       \n        <h3>deep links and universal links</h3>\n        \n             \n        <h3>Difference between UI and UX</h3>\n        \n             \n        <h3>progressive web app - create react app doc</h3>\n        \n             \n        <h3>JSDoc 3 for documenting js code</h3>\n        <div><a href=\"https://jsdoc.app/about-getting-started.html\">https://jsdoc.app/about-getting-started.html</a></div>\n             \n        <h3>Ajv JSON schema validator</h3>\n        <div><a href=\"https://ajv.js.org/\">https://ajv.js.org/</a></div>\n             \n        <h3>pm2 for managing local environment</h3>\n        <div><a href=\"https://pm2.keymetrics.io/docs/usage/quick-start/\">https://pm2.keymetrics.io/docs/usage/quick-start/</a></div>\n      ,<h1>Jest Mock main concepts</h1>       \n        <h3>There are two ways to mock functions: Either by creating a mock function to use in test code, or writing a manual mock to override a module dependency</h3>\n        \n             \n        <h3>Simple mock</h3>\n        <div>When we want to create a mock function -and or it's implementation-, we can just do it like this:<br><br></div><pre>// No implementation\r\nconst myMock = jest.fn()</pre><div><br></div><pre>// With implementation\r\nconst myMock = jest.fn(x =&gt; 42 + x)<br></pre>\n             \n        <h3>Mock the return value but NOT implementation</h3>\n        <div>For some reason you always seem to forget about this one, so here it comes:<br><br></div><pre>const myMock = jest.fn();\r\nconsole.log(myMock());\r\n// &gt; undefined\r\n\r\nmyMock.mockReturnValueOnce(10).mockReturnValueOnce('x').mockReturnValue(true);</pre>\n             \n        <h3>Mocking Modules, mocking returning value BUT NOT implementation - NOT manual mocking</h3>\n        <div>!! Has to go before all the imports and require calls<br><br></div><pre>// users.test.js\r\n\r\njest.mock('axios');\r\nconst axios = require('axios');\r\n\r\naxios.get.mockResolvedValue(resp);</pre><div><br>or <br><br></div><pre>// users.test.js\r\n\r\njest.mock('axios', () =&gt; { get: () =&gt; rest });\r\nconst axios = require('axios');</pre>\n             \n        <h3>Mocking Implementation</h3>\n        <div>- For functions that are in the file -so NOT for functions from another module-<br><br></div><pre>const myMockFn = jest.fn(cb =&gt; cb(null, true));\r\n\r\nmyMockFn((err, val) =&gt; console.log(val));</pre><div><br>- For functions that come from another module:<br><br></div><pre>// foo.js\r\nmodule.exports = function () {\r\n  // some implementation;\r\n};\r\n\r\n\r\n// test.js\r\njest.mock('../foo'); // this happens automatically with automocking\r\nconst foo = require('../foo');\r\n\r\n\r\n// foo is a mock function\r\nfoo.mockImplementation(() =&gt; 42);\r\nfoo();\r\n// &gt; 42</pre><div><br>** Passing the implementation to jest.mock is actually <em>optional. </em>If you don’t pass the implementation, the default behavior replaces all functions in that module with dummy mocks</div>\n             \n        <h3>Manual mocks -mocking globally-</h3>\n        <div>Used to mock the implementation GLOBALLY -for all tests- of MODULES -might or might not be node modules-<br><br>Where to place it -copy pasting from the docs-:<br><br></div><blockquote>Manual mocks are defined by writing a module in a __mocks__/ subdirectory immediately adjacent to the module. For example, to mock a module called user in the models directory, create a file called user.js and put it in the models/__mocks__ directory. Note that the __mocks__ folder is case-sensitive, so naming the directory __MOCKS__ will break on some systems.</blockquote><div><br></div><h1>NOW THE IMPORTANT STUFF, THIS IS WHY I WROTE THE WHOLE FUCKIN' THING:</h1><div><br>Now when you call jest.mock('./monty-python') without providing an implementation, Jest will use the manual mock, __mocks__/monty-python.js, as the implementation:</div><div><br>Actually, manual mocks for node_modules will be used <strong>automatically</strong>, even without calling jest.mock (this doesn’t apply to built-in modules). <br><br></div><div>You can always opt-out from manual mocks in lots of different ways, depending on what you need:<br><br></div><div> 1- by passing the implementation to jest.mock,<br><br></div><div>2 - by calling jest.unmock for modules like those in node_modules that would otherwise be mocked automatically,<br><br></div><div>3 - by calling jest.requireActual or jest.dontMock, if you need to use actual implementation only in particular tests, not the whole file etc.</div>\n             \n        <h3>jest.requireActual</h3>\n        <div>Whenever you want to use the real module, you can use this:<br><br></div><pre>const RealMontyPython = jest.requireActual('./monty-python')</pre><div><br>or alternatively, you can use \"dontMock\" followed by a regular \"require\" call<br><br></div><pre>it('gets the real meaning of life', () =&gt; {\r\n  jest.dontMock('./monty-python')\r\n  const RealMontyPython = require('./monty-python')\r\n  // ...\r\n  jest.resetModules()\r\n})</pre>\n      ,<h1>Tricks with Jest</h1>       \n        <h3>Hay un archivo aparte -playground.js- que tiene un modulo que has creado tu -sum.js-. Creamos __mocks__/sum.js</h3>\n        <div>SI EL MODULO ES UNA FUNCION<br><br>- Para que se ejecute el \"mock\", tenemos que escribir jest.mock('./sum.js'), sino utiliza la emplementacion original -sin mocks-<br><br>- Si en el test intentas modificar el \"sum\", no se puede -te dice que es read-only- pero SI que puedes modificar una propiedad de sum, como por ejemplo \"sum.leches = jest.fn(() =&gt; 5)\"<br><br>- El hecho de tener un modulo mockeado manualmente en __mocks__ y (si lo necesitas, porque los node_modules no lo necesitan a no ser que sean del core de node) llamar jest.mock('sum.js') NO convierte el module en mockeado (osea que no tiene \"calls\" ni \"instances\"). Poner un jest.fn() en el mock de __mocks__ no te va a ayudar tampoco demasiado<br><br>- Si lo que quieres es hacer un seguimiento de un modulo que aparece en playground.js, lo mejor es pasar del __mocks__, hacer un jest.mock('./sum.js') y luego un \"mockImplementation\"<br><br>- Si has hecho un mock en __mocks__, no lo puedes modificar con 'mockImplementation' ni puedes ver las calls. Pasa de ellos todo lo que puedas<br><br>SI EL MODULO ES UN OBJETO<br><br>- Lo mejor es utilizar spyOn <br>- spy no necesita el \"jest.mock('./divide')\"</div>\n             \n        <h3>en cuanto a \"clear\", \"reset\" y \"restore\"</h3>\n        <div>- clear: borra el \"calls\" y el \"instances\", pero deja la misma implementacion<br>- reset: borra el \"calls\" y el \"instances\", y sustituye la implementacion por \"jest.fn()\"<br>- restore: vuelve a la implementacion original -la no mockeada- IT ONLY WORKS WITH \"spyOn\", ose que has utilizado otro metodo, lo tienes que \"restorar\" manualmente</div>\n             \n        <h3>para utilizar \"spyOn\" cuando es una funcion -y no un objeto- lo que se exporta</h3>\n        <pre>// myHelperMethod.js\r\n\r\nexport const myHelperMethod = (param1, param2) =&gt; { // do something with the params };\r\n<br>// someOtherFileUsingMyHelperMethod.js\r\n\r\nimport * as MyHelperMethod from '../myHelperMethod';\r\n\r\n\r\njest.mock('../myHelperMethod', () =&gt; ({\r\n  myHelperMethod: jest.fn(),\r\n}));\r\n\r\nlet myHelperMethodSpy = jest.spyOn(MyHelperMethod, 'myHelperMethod');\r\n\r\n// ...\r\n// some setup\r\n// ...\r\n\r\ntest(() =&gt; {\r\n  expect(myHelperMethodSpy).toHaveBeenCalledWith(param1, param2);\r\n});</pre><div><br></div>\n      ,<h1>FETCH parameters in CORS</h1>       \n        <h3>mode</h3>\n        <div>las opciones son:</div><ul><li>cors</li><li>no-cors</li><li>same-origin</li></ul>\n             \n        <h3>credentials</h3>\n        <div>For cookies, HTTP authentication and TLS client certificates<br><br>the options are:</div><ul><li>omit: Tells browsers to exclude credentials from the request, and ignore any credentials sent back in the response (e.g., any <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie\">Set-Cookie</a> header).</li></ul><div><br></div><ul><li><strong>same-origin</strong></li></ul><div>Tells browsers to include credentials with requests to same-origin URLs, and use any credentials sent back in responses from same-origin URLs.<br><br></div><ul><li><strong>include</strong></li></ul><div>Tells browsers to include credentials in both same- and cross-origin requests, and always use any credentials sent back in responses.<br><br><strong>Note:</strong> Credentials may be included in simple and \"final\" cross-origin requests, but should not be included in <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#preflight_requests_and_credentials\">CORS preflight requests</a>.</div>\n      ,<h1>Referrer policy</h1>       \n        <h3>referrer header</h3>\n        <div>indicates which website the browser was before it reached the current one.<br>It might be some security concerns about indicating this. To deal with this problems we have the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy\">Request Referrer policy</a></div>\n      ,<h1>Express Routing</h1>       \n        <h3>Way to create a router</h3>\n        <pre>var router = express.Router([options])</pre><div><br></div>\n             \n        <h3>router.use</h3>\n        <div>You can use it with \"use\" (to add a middleware) and \"http methods\". It's useful to create the different routes that match with different paths.<br><br></div><pre>// always invoked\r\nrouter.use(function (req, res, next) {})\r\n\r\n// only for this paths\r\nrouter.get('/events', (req, res, next) =&gt; {})\r\nrouter.post('/book', (req, res, next) =&gt; {})</pre>\n             \n        <h3>router.route</h3>\n        <div>To chain methods/middlewares for the same route<br><br></div><pre>router.route('/users/:user_id')\r\n  .all(function (req, res, next) {\r\n    // runs for all HTTP verbs first\r\n    // think of it as route specific middleware!\r\n    next()\r\n  })\r\n  .get(function (req, res, next) {\r\n    res.json(req.user)\r\n  })\r\n  .put(function (req, res, next) {\r\n    // just an example of maybe updating the user\r\n    req.user.name = req.params.name\r\n    // save user ... etc\r\n    res.json(req.user)\r\n  })\r\n  .post(function (req, res, next) {\r\n    next(new Error('not implemented'))\r\n  })\r\n  .delete(function (req, res, next) {\r\n    next(new Error('not implemented'))\r\n  })</pre>\n             \n        <h3>difference between app.use and router.use</h3>\n        <div>The whole difference between \"app\" and \"router\" is fairly complicated. Basically const app = express() is the main app. I'm guessing that probably you don't want to create more than one, if you don't want to have problems of messing with state in two different apps.. <br>Then, in every module that you want to have, create a cont router = express.Router(). It's very similar to app (it's actually called a \"mini-app\"), but doesn't have methods to mess with the state of the app.</div>\n      "